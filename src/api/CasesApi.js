/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DocketNumberQccompleteBody} from '../model/DocketNumberQccompleteBody';
import {Document} from '../model/Document';
import {ModelCase} from '../model/ModelCase';
import {UnprocessableEntityError} from '../model/UnprocessableEntityError';
import {User} from '../model/User';

/**
* Cases service.
* @module api/CasesApi
* @version 2019-03-06T15:30:48Z
*/
export class CasesApi {

    /**
    * Constructs a new CasesApi. 
    * @alias module:api/CasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPost operation.
     * @callback moduleapi/CasesApi~caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * serves a court issued document
     * serves a court issued document 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/CasesApi~caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPost(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPost");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPost");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/serve-court-issued', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdServePost operation.
     * @callback moduleapi/CasesApi~caseDocumentsDocketNumberDocketEntryIdServePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * serves an externally-filed document
     * serves an externally-filed document 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/CasesApi~caseDocumentsDocketNumberDocketEntryIdServePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryIdServePost(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdServePost");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdServePost");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/serve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberAddPetitionerPut operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberAddPetitionerPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a petitioner to the case
     * adds a petitioner to the case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberAddPetitionerPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberAddPetitionerPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberAddPetitionerPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/add-petitioner,', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberBlockDelete operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberBlockDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removed the block from a case
     * removed the block from a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberBlockDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberBlockDelete(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberBlockDelete");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/block', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberBlockPost operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberBlockPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a block to a case
     * add a block to a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberBlockPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberBlockPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberBlockPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/block', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberCaseContextPut operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberCaseContextPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the caption, status, and judge on the given case.
     * Updates the caption, status, and judge on the given case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberCaseContextPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberCaseContextPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberCaseContextPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/case-context', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberConsolidateCaseDelete operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberConsolidateCaseDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unconsolidates the cases passed in the query string.
     * Unconsolidates the cases passed in the query string. 
     * @param {String} docketNumber 
     * @param {String} docketNumbersToRemove 
     * @param {module:api/CasesApi~caseMetaDocketNumberConsolidateCaseDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberConsolidateCaseDelete(docketNumber, docketNumbersToRemove, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberConsolidateCaseDelete");
      }
      // verify the required parameter 'docketNumbersToRemove' is set
      if (docketNumbersToRemove === undefined || docketNumbersToRemove === null) {
        throw new Error("Missing the required parameter 'docketNumbersToRemove' when calling caseMetaDocketNumberConsolidateCaseDelete");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        'docketNumbersToRemove': docketNumbersToRemove
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/consolidate-case', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberConsolidateCasePut operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberConsolidateCasePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consolidates two or more cases associated with the given docket number.
     * Consolidates two or more cases associated with the given docket number. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberConsolidateCasePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberConsolidateCasePut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberConsolidateCasePut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/consolidate-case', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberHighPriorityDelete operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberHighPriorityDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removes the high priority from a case
     * removes the high priority from a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberHighPriorityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberHighPriorityDelete(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberHighPriorityDelete");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/high-priority', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberHighPriorityPost operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberHighPriorityPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets a case as high priority
     * sets a case as high priority. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberHighPriorityPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberHighPriorityPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberHighPriorityPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/high-priority', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberOtherStatisticsPost operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberOtherStatisticsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update other statistics on a case
     * update other statistics on a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberOtherStatisticsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberOtherStatisticsPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberOtherStatisticsPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/other-statistics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberQcCompletePut operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberQcCompletePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the case to be marked as QCed
     * updates the case to be marked as QCed. 
     * @param {String} docketNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/DocketNumberQccompleteBody} opts.body the trial session info needed to identify and update a trial session
     * @param {module:api/CasesApi~caseMetaDocketNumberQcCompletePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberQcCompletePut(docketNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberQcCompletePut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/qc-complete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberSealAddressContactIdPut operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberSealAddressContactIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the specified case contact address as sealed
     * updates the case contact address as sealed. 
     * @param {String} docketNumber 
     * @param {String} contactId 
     * @param {module:api/CasesApi~caseMetaDocketNumberSealAddressContactIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberSealAddressContactIdPut(docketNumber, contactId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberSealAddressContactIdPut");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling caseMetaDocketNumberSealAddressContactIdPut");
      }

      let pathParams = {
        'docketNumber': docketNumber,'contactId': contactId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/seal-address/{contactId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberSealPut operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberSealPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the case as sealed
     * updates the case as sealed. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberSealPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberSealPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberSealPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/seal', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberStatisticsPost operation.
     * @callback moduleapi/CasesApi~caseMetaDocketNumberStatisticsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a statistic to a case
     * add a statistic to a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~caseMetaDocketNumberStatisticsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseMetaDocketNumberStatisticsPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberStatisticsPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/statistics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberAssociatePrivatePractitionerPost operation.
     * @callback moduleapi/CasesApi~casePartiesDocketNumberAssociatePrivatePractitionerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * associates a practitioner with a case
     * associates a practitioner with a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casePartiesDocketNumberAssociatePrivatePractitionerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casePartiesDocketNumberAssociatePrivatePractitionerPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberAssociatePrivatePractitionerPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/associate-private-practitioner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberAssociateRespondentPost operation.
     * @callback moduleapi/CasesApi~casePartiesDocketNumberAssociateRespondentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * associates a respondent with a case
     * associates a respondent with a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casePartiesDocketNumberAssociateRespondentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casePartiesDocketNumberAssociateRespondentPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberAssociateRespondentPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/associate-respondent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberCaseDetailsPut operation.
     * @callback moduleapi/CasesApi~casePartiesDocketNumberCaseDetailsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the case details on the case
     * updates the case details on the case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casePartiesDocketNumberCaseDetailsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casePartiesDocketNumberCaseDetailsPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberCaseDetailsPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/case-details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberContactPrimaryPut operation.
     * @callback moduleapi/CasesApi~casePartiesDocketNumberContactPrimaryPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the primary contact info on a case
     * Updates the primary contact info on a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casePartiesDocketNumberContactPrimaryPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casePartiesDocketNumberContactPrimaryPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberContactPrimaryPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/contact-primary', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberContactSecondaryPut operation.
     * @callback moduleapi/CasesApi~casePartiesDocketNumberContactSecondaryPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the secondary contact info on a case
     * Updates the secondary contact info on a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casePartiesDocketNumberContactSecondaryPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casePartiesDocketNumberContactSecondaryPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberContactSecondaryPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/contact-secondary', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberCounselUserIdDelete operation.
     * @callback moduleapi/CasesApi~casePartiesDocketNumberCounselUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the counsel from the case
     * Deletes the counsel from the case. 
     * @param {String} docketNumber 
     * @param {String} userId 
     * @param {module:api/CasesApi~casePartiesDocketNumberCounselUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casePartiesDocketNumberCounselUserIdDelete(docketNumber, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberCounselUserIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling casePartiesDocketNumberCounselUserIdDelete");
      }

      let pathParams = {
        'docketNumber': docketNumber,'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/counsel/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberCounselUserIdPut operation.
     * @callback moduleapi/CasesApi~casePartiesDocketNumberCounselUserIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the counsel on the case
     * Updates the counsel on the case. 
     * @param {String} docketNumber 
     * @param {String} userId 
     * @param {module:api/CasesApi~casePartiesDocketNumberCounselUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casePartiesDocketNumberCounselUserIdPut(docketNumber, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberCounselUserIdPut");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling casePartiesDocketNumberCounselUserIdPut");
      }

      let pathParams = {
        'docketNumber': docketNumber,'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/counsel/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberPetitionerInfoPut operation.
     * @callback moduleapi/CasesApi~casePartiesDocketNumberPetitionerInfoPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the petitioner information on the case
     * updates the petitioner information on the case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casePartiesDocketNumberPetitionerInfoPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casePartiesDocketNumberPetitionerInfoPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberPetitionerInfoPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/petitioner-info', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberConsolidatedCasesGet operation.
     * @callback moduleapi/CasesApi~casesDocketNumberConsolidatedCasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all consolidated cases associated with the given docket number.
     * Returns all consolidated cases associated with the given docket number. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casesDocketNumberConsolidatedCasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberConsolidatedCasesGet(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberConsolidatedCasesGet");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/consolidated-cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberGet operation.
     * @callback moduleapi/CasesApi~casesDocketNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a case by docket number
     * Get a case by docket number. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casesDocketNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberGet(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberGet");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberHead operation.
     * @callback moduleapi/CasesApi~casesDocketNumberHeadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a case existence by docket number
     * Get a case existence by docket number. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casesDocketNumberHeadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberHead(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberHead");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberIrsPetitionPackageDelete operation.
     * @callback moduleapi/CasesApi~casesDocketNumberIrsPetitionPackageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes the petition on the case from the holding queue
     * Deletes the petition on the case from the holding queue. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casesDocketNumberIrsPetitionPackageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberIrsPetitionPackageDelete(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberIrsPetitionPackageDelete");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/irsPetitionPackage', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberIrsPetitionPackagePost operation.
     * @callback moduleapi/CasesApi~casesDocketNumberIrsPetitionPackagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sends the case to the holding queue
     * Send a packaged case to the respondent. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casesDocketNumberIrsPetitionPackagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberIrsPetitionPackagePost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberIrsPetitionPackagePost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/irsPetitionPackage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberPut operation.
     * @callback moduleapi/CasesApi~casesDocketNumberPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a case
     * Update a case. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~casesDocketNumberPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberRemovePendingDocketEntryIdDelete operation.
     * @callback moduleapi/CasesApi~casesDocketNumberRemovePendingDocketEntryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removes a pending item from a case
     * removes a pending item from a case. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/CasesApi~casesDocketNumberRemovePendingDocketEntryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberRemovePendingDocketEntryIdDelete(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberRemovePendingDocketEntryIdDelete");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling casesDocketNumberRemovePendingDocketEntryIdDelete");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/remove-pending/{docketEntryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberStatisticsStatisticIdDelete operation.
     * @callback moduleapi/CasesApi~casesDocketNumberStatisticsStatisticIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removes a statistics entry off a case
     * removes a statistics entry off a case. 
     * @param {String} docketNumber 
     * @param {String} statisticId 
     * @param {module:api/CasesApi~casesDocketNumberStatisticsStatisticIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberStatisticsStatisticIdDelete(docketNumber, statisticId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberStatisticsStatisticIdDelete");
      }
      // verify the required parameter 'statisticId' is set
      if (statisticId === undefined || statisticId === null) {
        throw new Error("Missing the required parameter 'statisticId' when calling casesDocketNumberStatisticsStatisticIdDelete");
      }

      let pathParams = {
        'docketNumber': docketNumber,'statisticId': statisticId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/statistics/{statisticId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberStatisticsStatisticIdPut operation.
     * @callback moduleapi/CasesApi~casesDocketNumberStatisticsStatisticIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates statistics on a case
     * updates statistics on a case. 
     * @param {String} docketNumber 
     * @param {String} statisticId 
     * @param {module:api/CasesApi~casesDocketNumberStatisticsStatisticIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesDocketNumberStatisticsStatisticIdPut(docketNumber, statisticId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberStatisticsStatisticIdPut");
      }
      // verify the required parameter 'statisticId' is set
      if (statisticId === undefined || statisticId === null) {
        throw new Error("Missing the required parameter 'statisticId' when calling casesDocketNumberStatisticsStatisticIdPut");
      }

      let pathParams = {
        'docketNumber': docketNumber,'statisticId': statisticId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/statistics/{statisticId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesGet operation.
     * @callback moduleapi/CasesApi~casesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve open and closed cases for the currently authenticated user
     * Retrieve open and closed cases for the currently authenticated user. 
     * @param {module:api/CasesApi~casesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesPaperPost operation.
     * @callback moduleapi/CasesApi~casesPaperPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a case from a paper submission
     * Create a case from a paper submission. 
     * @param {module:api/CasesApi~casesPaperPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesPaperPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/paper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesSearchGet operation.
     * @callback moduleapi/CasesApi~casesSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search for a case by name, country, state, and/or year filed
     * Search for a case by name, country, state, and/or year filed. 
     * @param {module:api/CasesApi~casesSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    casesSearchGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the irsPractitionersRespondentIdCasesGet operation.
     * @callback moduleapi/CasesApi~irsPractitionersRespondentIdCasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all cases for a user
     * Get all cases for a user. 
     * @param {String} respondentId 
     * @param {module:api/CasesApi~irsPractitionersRespondentIdCasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    irsPractitionersRespondentIdCasesGet(respondentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'respondentId' is set
      if (respondentId === undefined || respondentId === null) {
        throw new Error("Missing the required parameter 'respondentId' when calling irsPractitionersRespondentIdCasesGet");
      }

      let pathParams = {
        'respondentId': respondentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/irsPractitioners/{respondentId}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiCasesDocketNumberGet operation.
     * @callback moduleapi/CasesApi~publicApiCasesDocketNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a case by docket number
     * Get a case by docket number. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~publicApiCasesDocketNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicApiCasesDocketNumberGet(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling publicApiCasesDocketNumberGet");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/public-api/cases/{docketNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiDocketNumberSearchDocketNumberGet operation.
     * @callback moduleapi/CasesApi~publicApiDocketNumberSearchDocketNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a case by docket number
     * Get a case by docketNumber. 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~publicApiDocketNumberSearchDocketNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicApiDocketNumberSearchDocketNumberGet(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling publicApiDocketNumberSearchDocketNumberGet");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/public-api/docket-number-search/{docketNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiSearchGet operation.
     * @callback moduleapi/CasesApi~publicApiSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search for a case by name, country, state, and/or year filed
     * Search for a case by name, country, state, and/or year filed. 
     * @param {module:api/CasesApi~publicApiSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicApiSearchGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/public-api/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsBlockedTrialLocationGet operation.
     * @callback moduleapi/CasesApi~reportsBlockedTrialLocationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all blocked cases
     * get all blocked cases. 
     * @param {String} trialLocation 
     * @param {module:api/CasesApi~reportsBlockedTrialLocationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    reportsBlockedTrialLocationGet(trialLocation, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialLocation' is set
      if (trialLocation === undefined || trialLocation === null) {
        throw new Error("Missing the required parameter 'trialLocation' when calling reportsBlockedTrialLocationGet");
      }

      let pathParams = {
        'trialLocation': trialLocation
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/reports/blocked/{trialLocation}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsCaseInventoryReportGet operation.
     * @callback moduleapi/CasesApi~reportsCaseInventoryReportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get case inventory report
     * get case inventory report. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.associatedJudge 
     * @param {Number} opts.from 
     * @param {Number} opts.pageSize 
     * @param {String} opts.status 
     * @param {module:api/CasesApi~reportsCaseInventoryReportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    reportsCaseInventoryReportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'associatedJudge': opts['associatedJudge'],'from': opts['from'],'pageSize': opts['pageSize'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/reports/case-inventory-report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsPrintableCaseInventoryReportGet operation.
     * @callback moduleapi/CasesApi~reportsPrintableCaseInventoryReportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * generate printable case inventory report
     * generate printable case inventory report. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.associatedJudge 
     * @param {String} opts.status 
     * @param {module:api/CasesApi~reportsPrintableCaseInventoryReportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    reportsPrintableCaseInventoryReportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'associatedJudge': opts['associatedJudge'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/reports/printable-case-inventory-report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdCaseDocketNumberPendingGet operation.
     * @callback moduleapi/CasesApi~usersUserIdCaseDocketNumberPendingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verify if user has pending association with the case
     * Verify if user has pending associationwith the case. 
     * @param {String} userId 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~usersUserIdCaseDocketNumberPendingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdCaseDocketNumberPendingGet(userId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCaseDocketNumberPendingGet");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling usersUserIdCaseDocketNumberPendingGet");
      }

      let pathParams = {
        'userId': userId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/case/{docketNumber}/pending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdCaseDocketNumberPendingPut operation.
     * @callback moduleapi/CasesApi~usersUserIdCaseDocketNumberPendingPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add pending association for practitioner for case if not associated with the case
     * Add pending association for practitioner for case if not associated with the case. 
     * @param {String} userId 
     * @param {String} docketNumber 
     * @param {module:api/CasesApi~usersUserIdCaseDocketNumberPendingPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdCaseDocketNumberPendingPut(userId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCaseDocketNumberPendingPut");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling usersUserIdCaseDocketNumberPendingPut");
      }

      let pathParams = {
        'userId': userId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/case/{docketNumber}/pending', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdCasesGet operation.
     * @callback moduleapi/CasesApi~usersUserIdCasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all cases for a user
     * Get all cases for a user. 
     * @param {String} userId 
     * @param {module:api/CasesApi~usersUserIdCasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUserIdCasesGet(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCasesGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/users/{userId}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
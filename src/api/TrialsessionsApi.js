/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelCase} from '../model/ModelCase';
import {TrialSession} from '../model/TrialSession';
import {TrialSessionIdPrintableworkingcopyBody} from '../model/TrialSessionIdPrintableworkingcopyBody';
import {TrialSessionWorkingCopy} from '../model/TrialSessionWorkingCopy';

/**
* Trialsessions service.
* @module api/TrialsessionsApi
* @version 2019-03-06T15:30:48Z
*/
export class TrialsessionsApi {

    /**
    * Constructs a new TrialsessionsApi. 
    * @alias module:api/TrialsessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the trialSessionsGet operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets all trial sessions
     * gets all trial sessions. 
     * @param {module:api/TrialsessionsApi~trialSessionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsPost operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new trial session
     * creates a new trial session. 
     * @param {module:api/TrialsessionsApi~trialSessionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsPut operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a trial session
     * updates a trial session. 
     * @param {module:api/TrialsessionsApi~trialSessionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsPut(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdCasesDocketNumberPost operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdCasesDocketNumberPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a case to a trial session
     * adds a case to a trial session. 
     * @param {String} trialSessionId 
     * @param {String} docketNumber 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdCasesDocketNumberPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdCasesDocketNumberPost(trialSessionId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdCasesDocketNumberPost");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling trialSessionsTrialSessionIdCasesDocketNumberPost");
      }

      let pathParams = {
        'trialSessionId': trialSessionId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/cases/{docketNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdEligibleCasesGet operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdEligibleCasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets eligible cases for a trial session
     * gets eligible cases for a trial session. 
     * @param {String} trialSessionId 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdEligibleCasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdEligibleCasesGet(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdEligibleCasesGet");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/eligible-cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdGenerateNoticesPost operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdGenerateNoticesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * generates notices of trial and standing pretrial document for cases within a given trial session and returns a PDF for any paper service parties associated
     * generates notices of trial and standing pretrial document for cases within a given trial session and returns a PDF for any paper service parties associated. 
     * @param {String} trialSessionId 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdGenerateNoticesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdGenerateNoticesPost(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdGenerateNoticesPost");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/generate-notices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdGet operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets a trial session
     * gets a trial session. 
     * @param {String} trialSessionId 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdGet(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdGet");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdGetAssociatedCasesGet operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdGetAssociatedCasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the cases associated with a trial session
     * gets the cases associated with a trial session. 
     * @param {String} trialSessionId 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdGetAssociatedCasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdGetAssociatedCasesGet(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdGetAssociatedCasesGet");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/getAssociatedCases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdPrintableWorkingCopyPost operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdPrintableWorkingCopyPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * generates a printable trial session copy report
     * generates a printable trial session copy report . 
     * @param {String} trialSessionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/TrialSessionIdPrintableworkingcopyBody} opts.body the trial session info needed to print a working copy
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdPrintableWorkingCopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdPrintableWorkingCopyPost(trialSessionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdPrintableWorkingCopyPost");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = ['*/*'];
      let accepts = ['text/plain'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/printable-working-copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdRemoveCaseDocketNumberPut operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdRemoveCaseDocketNumberPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removes a case from a trial session
     * removes a case from a trial session. 
     * @param {String} trialSessionId 
     * @param {String} docketNumber 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdRemoveCaseDocketNumberPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdRemoveCaseDocketNumberPut(trialSessionId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdRemoveCaseDocketNumberPut");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling trialSessionsTrialSessionIdRemoveCaseDocketNumberPut");
      }

      let pathParams = {
        'trialSessionId': trialSessionId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/remove-case/{docketNumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdSetCalendarPost operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdSetCalendarPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets the calendar for a trial session
     * sets the calendar for a trial session. 
     * @param {String} trialSessionId 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdSetCalendarPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdSetCalendarPost(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdSetCalendarPost");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/set-calendar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdSetHearingDocketNumberPost operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdSetHearingDocketNumberPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds the case to the given hearing
     * adds the case to the given hearing. 
     * @param {String} trialSessionId 
     * @param {String} docketNumber 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdSetHearingDocketNumberPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdSetHearingDocketNumberPost(trialSessionId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdSetHearingDocketNumberPost");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling trialSessionsTrialSessionIdSetHearingDocketNumberPost");
      }

      let pathParams = {
        'trialSessionId': trialSessionId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/set-hearing/{docketNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdSetSwingSessionPost operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdSetSwingSessionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSession{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets a trial session as a swing session
     * sets a trial session as a swing session. 
     * @param {String} trialSessionId 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdSetSwingSessionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdSetSwingSessionPost(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdSetSwingSessionPost");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSession;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/set-swing-session', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdWorkingCopyGet operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdWorkingCopyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSessionWorkingCopy{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the trial session working copy for a trial session for the logged in user
     * gets the trial session working copy for a trial session for the logged in user. 
     * @param {String} trialSessionId 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdWorkingCopyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdWorkingCopyGet(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdWorkingCopyGet");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSessionWorkingCopy;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/working-copy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdWorkingCopyPut operation.
     * @callback moduleapi/TrialsessionsApi~trialSessionsTrialSessionIdWorkingCopyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSessionWorkingCopy{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the trial session working copy for a trial session for the logged in user
     * updates the trial session working copy for a trial session for the logged in user. 
     * @param {String} trialSessionId 
     * @param {module:api/TrialsessionsApi~trialSessionsTrialSessionIdWorkingCopyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    trialSessionsTrialSessionIdWorkingCopyPut(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdWorkingCopyPut");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSessionWorkingCopy;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/working-copy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
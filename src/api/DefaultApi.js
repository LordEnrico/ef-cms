/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CourtissuedordersDocketEntryIdBody} from '../model/CourtissuedordersDocketEntryIdBody';
import {CourtissuedordersDocketEntryIdBody1} from '../model/CourtissuedordersDocketEntryIdBody1';
import {DocketNumberQccompleteBody1} from '../model/DocketNumberQccompleteBody1';
import {Document} from '../model/Document';
import {MessageIdReadBody1} from '../model/MessageIdReadBody1';
import {ParentMessageIdCompleteBody1} from '../model/ParentMessageIdCompleteBody1';
import {ParentMessageIdForwardBody1} from '../model/ParentMessageIdForwardBody1';
import {ParentMessageIdReplyBody1} from '../model/ParentMessageIdReplyBody1';
import {PolicyUrl} from '../model/PolicyUrl';
import {TrialSessionIdPrintableworkingcopyBody1} from '../model/TrialSessionIdPrintableworkingcopyBody1';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-03-06T15:30:48Z
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiCasesDocketNumberGenerateDocketRecordOptions operation.
     * @callback moduleapi/DefaultApi~apiCasesDocketNumberGenerateDocketRecordOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~apiCasesDocketNumberGenerateDocketRecordOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCasesDocketNumberGenerateDocketRecordOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling apiCasesDocketNumberGenerateDocketRecordOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/cases/{docketNumber}/generate-docket-record', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCasesDocketNumberGenerateDocketRecordPost operation.
     * @callback moduleapi/DefaultApi~apiCasesDocketNumberGenerateDocketRecordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a pdf of the docket record for a case
     * create a pdf of the docket record for a case. 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~apiCasesDocketNumberGenerateDocketRecordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCasesDocketNumberGenerateDocketRecordPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling apiCasesDocketNumberGenerateDocketRecordPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/cases/{docketNumber}/generate-docket-record', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCourtIssuedOrderOptions operation.
     * @callback moduleapi/DefaultApi~apiCourtIssuedOrderOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~apiCourtIssuedOrderOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCourtIssuedOrderOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/court-issued-order', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCourtIssuedOrderPost operation.
     * @callback moduleapi/DefaultApi~apiCourtIssuedOrderPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a court issued order pdf preview
     * create a court issued order pdf preview. 
     * @param {module:api/DefaultApi~apiCourtIssuedOrderPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCourtIssuedOrderPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/court-issued-order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDocketRecordPdfOptions operation.
     * @callback moduleapi/DefaultApi~apiDocketRecordPdfOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~apiDocketRecordPdfOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDocketRecordPdfOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/docket-record-pdf', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDocketRecordPdfPost operation.
     * @callback moduleapi/DefaultApi~apiDocketRecordPdfPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a pdf of the docket record for a case
     * create a pdf of the docket record for a case. 
     * @param {module:api/DefaultApi~apiDocketRecordPdfPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDocketRecordPdfPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/docket-record-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiNotificationsOptions operation.
     * @callback moduleapi/DefaultApi~apiNotificationsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~apiNotificationsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNotificationsOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/notifications', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiRunBatchProcessPost operation.
     * @callback moduleapi/DefaultApi~apiRunBatchProcessPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyUrl{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * run IRS batch process
     * Run the (temporary) send to IRS batch process, which creates a ZIP file of petition documents and uploads it to S3. 
     * @param {module:api/DefaultApi~apiRunBatchProcessPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiRunBatchProcessPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PolicyUrl;

      return this.apiClient.callApi(
        '/api/run-batch-process', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiSwaggerGet operation.
     * @callback moduleapi/DefaultApi~apiSwaggerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~apiSwaggerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSwaggerGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/swagger', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiSwaggerJsonGet operation.
     * @callback moduleapi/DefaultApi~apiSwaggerJsonGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~apiSwaggerJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSwaggerJsonGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/swagger.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiSwaggerJsonOptions operation.
     * @callback moduleapi/DefaultApi~apiSwaggerJsonOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~apiSwaggerJsonOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSwaggerJsonOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/swagger.json', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiSwaggerOptions operation.
     * @callback moduleapi/DefaultApi~apiSwaggerOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~apiSwaggerOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSwaggerOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/swagger', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the asyncUsersVerifyEmailOptions operation.
     * @callback moduleapi/DefaultApi~asyncUsersVerifyEmailOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~asyncUsersVerifyEmailOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    asyncUsersVerifyEmailOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/async/users/verify-email', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authLoginOptions operation.
     * @callback moduleapi/DefaultApi~authLoginOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~authLoginOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authLoginOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/auth/login', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authRefreshOptions operation.
     * @callback moduleapi/DefaultApi~authRefreshOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~authRefreshOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authRefreshOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/auth/refresh', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDeadlinesDocketNumberCaseDeadlineIdOptions operation.
     * @callback moduleapi/DefaultApi~caseDeadlinesDocketNumberCaseDeadlineIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} caseDeadlineId 
     * @param {module:api/DefaultApi~caseDeadlinesDocketNumberCaseDeadlineIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDeadlinesDocketNumberCaseDeadlineIdOptions(docketNumber, caseDeadlineId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDeadlinesDocketNumberCaseDeadlineIdOptions");
      }
      // verify the required parameter 'caseDeadlineId' is set
      if (caseDeadlineId === undefined || caseDeadlineId === null) {
        throw new Error("Missing the required parameter 'caseDeadlineId' when calling caseDeadlinesDocketNumberCaseDeadlineIdOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'caseDeadlineId': caseDeadlineId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-deadlines/{docketNumber}/{caseDeadlineId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDeadlinesDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~caseDeadlinesDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDeadlinesDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDeadlinesDocketNumberOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDeadlinesDocketNumberOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-deadlines/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDeadlinesOptions operation.
     * @callback moduleapi/DefaultApi~caseDeadlinesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~caseDeadlinesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDeadlinesOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-deadlines', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketEntryIdAppendPdfOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketEntryIdAppendPdfOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketEntryIdAppendPdfOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketEntryIdAppendPdfOptions(docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketEntryIdAppendPdfOptions");
      }

      let pathParams = {
        'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketEntryId}/append-pdf', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberCourtIssuedDocketEntryOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberCourtIssuedDocketEntryOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberCourtIssuedDocketEntryOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberCourtIssuedDocketEntryOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberCourtIssuedDocketEntryOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/court-issued-docket-entry', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberCourtIssuedDocketEntryPost operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberCourtIssuedDocketEntryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a docket entry for a court-issued document on the case
     * creates a docket entry for a court-issued document on the case. 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberCourtIssuedDocketEntryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberCourtIssuedDocketEntryPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberCourtIssuedDocketEntryPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/court-issued-docket-entry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberCourtIssuedDocketEntryPut operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberCourtIssuedDocketEntryPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a docket entry for a court-issued document on the case
     * updates a docket entry for a court-issued document on the case. 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberCourtIssuedDocketEntryPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberCourtIssuedDocketEntryPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberCourtIssuedDocketEntryPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/court-issued-docket-entry', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberCourtIssuedOrderOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberCourtIssuedOrderOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberCourtIssuedOrderOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberCourtIssuedOrderOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberCourtIssuedOrderOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/court-issued-order', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberCourtIssuedOrderPost operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberCourtIssuedOrderPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * files a court issued order on the case
     * files a court issued order on the case. 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberCourtIssuedOrderPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberCourtIssuedOrderPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberCourtIssuedOrderPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/court-issued-order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CourtissuedordersDocketEntryIdBody1} opts.body the draft order information
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdOptions(docketNumber, docketEntryId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/court-issued-orders/{docketEntryId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdPut operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the draft court issued order
     * updates the draft court issued order. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CourtissuedordersDocketEntryIdBody} opts.body the draft order information
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdPut(docketNumber, docketEntryId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdPut");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberCourtIssuedOrdersDocketEntryIdPut");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = ['*/*'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/court-issued-orders/{docketEntryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryCompleteOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryCompleteOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryCompleteOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryCompleteOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryCompleteOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/docket-entry-complete', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdCoversheetOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdCoversheetOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdCoversheetOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdCoversheetOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdCoversheetOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdCoversheetOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/coversheet', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdRemovePdfOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdRemovePdfOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdRemovePdfOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdRemovePdfOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdRemovePdfOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdRemovePdfOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/remove-pdf', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdSealOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdSealOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdSealOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdSealOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdSealOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdSealOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/seal', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/serve-court-issued', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdServeOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdServeOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdServeOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdServeOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdServeOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdServeOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/serve', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdSignOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdSignOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdSignOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdSignOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdSignOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdSignOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/sign', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdStrikeOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdStrikeOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdStrikeOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdStrikeOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdStrikeOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdStrikeOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/strike', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdUnsealOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdUnsealOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdUnsealOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdUnsealOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdUnsealOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdUnsealOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/unseal', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdWorkItemsOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryIdWorkItemsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryIdWorkItemsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdWorkItemsOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdWorkItemsOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdWorkItemsOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/work-items', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryInProgressOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryInProgressOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryInProgressOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryInProgressOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryInProgressOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/docket-entry-in-progress', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryMetaOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberDocketEntryMetaOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberDocketEntryMetaOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryMetaOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryMetaOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/docket-entry-meta', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberExternalDocumentOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberExternalDocumentOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberExternalDocumentOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberExternalDocumentOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberExternalDocumentOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/external-document', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberKeyDocumentDownloadUrlOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberKeyDocumentDownloadUrlOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} key 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberKeyDocumentDownloadUrlOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberKeyDocumentDownloadUrlOptions(docketNumber, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberKeyDocumentDownloadUrlOptions");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling caseDocumentsDocketNumberKeyDocumentDownloadUrlOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{key}/document-download-url', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberKeyDownloadPolicyUrlOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberKeyDownloadPolicyUrlOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberKeyDownloadPolicyUrlOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberKeyDownloadPolicyUrlOptions(key, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling caseDocumentsDocketNumberKeyDownloadPolicyUrlOptions");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberKeyDownloadPolicyUrlOptions");
      }

      let pathParams = {
        'key': key,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{key}/download-policy-url', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberMotionDocketEntryIdStampOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberMotionDocketEntryIdStampOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} motionDocketEntryId 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberMotionDocketEntryIdStampOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberMotionDocketEntryIdStampOptions(docketNumber, motionDocketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberMotionDocketEntryIdStampOptions");
      }
      // verify the required parameter 'motionDocketEntryId' is set
      if (motionDocketEntryId === undefined || motionDocketEntryId === null) {
        throw new Error("Missing the required parameter 'motionDocketEntryId' when calling caseDocumentsDocketNumberMotionDocketEntryIdStampOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'motionDocketEntryId': motionDocketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{motionDocketEntryId}/stamp', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberPaperFilingOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocketNumberPaperFilingOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseDocumentsDocketNumberPaperFilingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberPaperFilingOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberPaperFilingOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/paper-filing', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocumentContentsIdDocumentContentsOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsDocumentContentsIdDocumentContentsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} documentContentsId 
     * @param {module:api/DefaultApi~caseDocumentsDocumentContentsIdDocumentContentsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocumentContentsIdDocumentContentsOptions(documentContentsId, callback) {
      
      let postBody = null;
      // verify the required parameter 'documentContentsId' is set
      if (documentContentsId === undefined || documentContentsId === null) {
        throw new Error("Missing the required parameter 'documentContentsId' when calling caseDocumentsDocumentContentsIdDocumentContentsOptions");
      }

      let pathParams = {
        'documentContentsId': documentContentsId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{documentContentsId}/document-contents', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsOrderSearchOptions operation.
     * @callback moduleapi/DefaultApi~caseDocumentsOrderSearchOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~caseDocumentsOrderSearchOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsOrderSearchOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/order-search', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberAddPetitionerOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberAddPetitionerOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseMetaDocketNumberAddPetitionerOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberAddPetitionerOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberAddPetitionerOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/add-petitioner,', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberBlockOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberBlockOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseMetaDocketNumberBlockOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberBlockOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberBlockOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/block', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberCaseContextOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberCaseContextOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseMetaDocketNumberCaseContextOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberCaseContextOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberCaseContextOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/case-context', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberConsolidateCaseOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberConsolidateCaseOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseMetaDocketNumberConsolidateCaseOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberConsolidateCaseOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberConsolidateCaseOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/consolidate-case', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberHighPriorityOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberHighPriorityOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseMetaDocketNumberHighPriorityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberHighPriorityOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberHighPriorityOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/high-priority', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberOtherStatisticsOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberOtherStatisticsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseMetaDocketNumberOtherStatisticsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberOtherStatisticsOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberOtherStatisticsOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/other-statistics', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberQcCompleteOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberQcCompleteOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/DocketNumberQccompleteBody1} opts.body the trial session info needed to identify and update a trial session
     * @param {module:api/DefaultApi~caseMetaDocketNumberQcCompleteOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberQcCompleteOptions(docketNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberQcCompleteOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/qc-complete', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberSealAddressContactIdOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberSealAddressContactIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} contactId 
     * @param {module:api/DefaultApi~caseMetaDocketNumberSealAddressContactIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberSealAddressContactIdOptions(docketNumber, contactId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberSealAddressContactIdOptions");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling caseMetaDocketNumberSealAddressContactIdOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'contactId': contactId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/seal-address/{contactId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberSealOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberSealOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseMetaDocketNumberSealOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberSealOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberSealOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/seal', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseMetaDocketNumberStatisticsOptions operation.
     * @callback moduleapi/DefaultApi~caseMetaDocketNumberStatisticsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseMetaDocketNumberStatisticsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseMetaDocketNumberStatisticsOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseMetaDocketNumberStatisticsOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-meta/{docketNumber}/statistics', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseNotesDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~caseNotesDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseNotesDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseNotesDocketNumberOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseNotesDocketNumberOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-notes/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseNotesDocketNumberUserNotesOptions operation.
     * @callback moduleapi/DefaultApi~caseNotesDocketNumberUserNotesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~caseNotesDocketNumberUserNotesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseNotesDocketNumberUserNotesOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseNotesDocketNumberUserNotesOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-notes/{docketNumber}/user-notes', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberAssociatePrivatePractitionerOptions operation.
     * @callback moduleapi/DefaultApi~casePartiesDocketNumberAssociatePrivatePractitionerOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casePartiesDocketNumberAssociatePrivatePractitionerOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casePartiesDocketNumberAssociatePrivatePractitionerOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberAssociatePrivatePractitionerOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/associate-private-practitioner', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberAssociateRespondentOptions operation.
     * @callback moduleapi/DefaultApi~casePartiesDocketNumberAssociateRespondentOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casePartiesDocketNumberAssociateRespondentOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casePartiesDocketNumberAssociateRespondentOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberAssociateRespondentOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/associate-respondent', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberCaseDetailsOptions operation.
     * @callback moduleapi/DefaultApi~casePartiesDocketNumberCaseDetailsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casePartiesDocketNumberCaseDetailsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casePartiesDocketNumberCaseDetailsOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberCaseDetailsOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/case-details', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberContactPrimaryOptions operation.
     * @callback moduleapi/DefaultApi~casePartiesDocketNumberContactPrimaryOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casePartiesDocketNumberContactPrimaryOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casePartiesDocketNumberContactPrimaryOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberContactPrimaryOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/contact-primary', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberContactSecondaryOptions operation.
     * @callback moduleapi/DefaultApi~casePartiesDocketNumberContactSecondaryOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casePartiesDocketNumberContactSecondaryOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casePartiesDocketNumberContactSecondaryOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberContactSecondaryOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/contact-secondary', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberCounselUserIdOptions operation.
     * @callback moduleapi/DefaultApi~casePartiesDocketNumberCounselUserIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} userId 
     * @param {module:api/DefaultApi~casePartiesDocketNumberCounselUserIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casePartiesDocketNumberCounselUserIdOptions(docketNumber, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberCounselUserIdOptions");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling casePartiesDocketNumberCounselUserIdOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/counsel/{userId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casePartiesDocketNumberPetitionerInfoOptions operation.
     * @callback moduleapi/DefaultApi~casePartiesDocketNumberPetitionerInfoOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casePartiesDocketNumberPetitionerInfoOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casePartiesDocketNumberPetitionerInfoOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casePartiesDocketNumberPetitionerInfoOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-parties/{docketNumber}/petitioner-info', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberConsolidatedCasesOptions operation.
     * @callback moduleapi/DefaultApi~casesDocketNumberConsolidatedCasesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casesDocketNumberConsolidatedCasesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casesDocketNumberConsolidatedCasesOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberConsolidatedCasesOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/consolidated-cases', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberIrsPetitionPackageOptions operation.
     * @callback moduleapi/DefaultApi~casesDocketNumberIrsPetitionPackageOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casesDocketNumberIrsPetitionPackageOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casesDocketNumberIrsPetitionPackageOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberIrsPetitionPackageOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/irsPetitionPackage', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~casesDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~casesDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casesDocketNumberOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberRemovePendingDocketEntryIdOptions operation.
     * @callback moduleapi/DefaultApi~casesDocketNumberRemovePendingDocketEntryIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DefaultApi~casesDocketNumberRemovePendingDocketEntryIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casesDocketNumberRemovePendingDocketEntryIdOptions(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberRemovePendingDocketEntryIdOptions");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling casesDocketNumberRemovePendingDocketEntryIdOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/remove-pending/{docketEntryId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesDocketNumberStatisticsStatisticIdOptions operation.
     * @callback moduleapi/DefaultApi~casesDocketNumberStatisticsStatisticIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} statisticId 
     * @param {module:api/DefaultApi~casesDocketNumberStatisticsStatisticIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casesDocketNumberStatisticsStatisticIdOptions(docketNumber, statisticId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling casesDocketNumberStatisticsStatisticIdOptions");
      }
      // verify the required parameter 'statisticId' is set
      if (statisticId === undefined || statisticId === null) {
        throw new Error("Missing the required parameter 'statisticId' when calling casesDocketNumberStatisticsStatisticIdOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'statisticId': statisticId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases/{docketNumber}/statistics/{statisticId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesOptions operation.
     * @callback moduleapi/DefaultApi~casesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~casesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casesOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesPaperOptions operation.
     * @callback moduleapi/DefaultApi~casesPaperOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~casesPaperOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casesPaperOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases/paper', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the casesSearchOptions operation.
     * @callback moduleapi/DefaultApi~casesSearchOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~casesSearchOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    casesSearchOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases/search', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentsFilingReceiptPdfOptions operation.
     * @callback moduleapi/DefaultApi~documentsFilingReceiptPdfOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~documentsFilingReceiptPdfOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsFilingReceiptPdfOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/filing-receipt-pdf', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentsFilingReceiptPdfPost operation.
     * @callback moduleapi/DefaultApi~documentsFilingReceiptPdfPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a pdf receipt for filing a document or documents
     * create a pdf receipt for filing a document or documents. 
     * @param {module:api/DefaultApi~documentsFilingReceiptPdfPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsFilingReceiptPdfPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/filing-receipt-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentsKeyValidateOptions operation.
     * @callback moduleapi/DefaultApi~documentsKeyValidateOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~documentsKeyValidateOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsKeyValidateOptions(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling documentsKeyValidateOptions");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/{key}/validate', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentsKeyVirusScanOptions operation.
     * @callback moduleapi/DefaultApi~documentsKeyVirusScanOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~documentsKeyVirusScanOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsKeyVirusScanOptions(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling documentsKeyVirusScanOptions");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/{key}/virus-scan', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentsUploadPolicyOptions operation.
     * @callback moduleapi/DefaultApi~documentsUploadPolicyOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~documentsUploadPolicyOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsUploadPolicyOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/upload-policy', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the featureFlagFeatureFlagGet operation.
     * @callback moduleapi/DefaultApi~featureFlagFeatureFlagGetCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get feature flag value
     * get feature flag value. 
     * @param {String} featureFlag 
     * @param {module:api/DefaultApi~featureFlagFeatureFlagGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    featureFlagFeatureFlagGet(featureFlag, callback) {
      
      let postBody = null;
      // verify the required parameter 'featureFlag' is set
      if (featureFlag === undefined || featureFlag === null) {
        throw new Error("Missing the required parameter 'featureFlag' when calling featureFlagFeatureFlagGet");
      }

      let pathParams = {
        'featureFlag': featureFlag
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/feature-flag/{featureFlag}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the featureFlagFeatureFlagOptions operation.
     * @callback moduleapi/DefaultApi~featureFlagFeatureFlagOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} featureFlag 
     * @param {module:api/DefaultApi~featureFlagFeatureFlagOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featureFlagFeatureFlagOptions(featureFlag, callback) {
      
      let postBody = null;
      // verify the required parameter 'featureFlag' is set
      if (featureFlag === undefined || featureFlag === null) {
        throw new Error("Missing the required parameter 'featureFlag' when calling featureFlagFeatureFlagOptions");
      }

      let pathParams = {
        'featureFlag': featureFlag
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/feature-flag/{featureFlag}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the irsPractitionersRespondentIdCasesOptions operation.
     * @callback moduleapi/DefaultApi~irsPractitionersRespondentIdCasesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} respondentId 
     * @param {module:api/DefaultApi~irsPractitionersRespondentIdCasesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    irsPractitionersRespondentIdCasesOptions(respondentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'respondentId' is set
      if (respondentId === undefined || respondentId === null) {
        throw new Error("Missing the required parameter 'respondentId' when calling irsPractitionersRespondentIdCasesOptions");
      }

      let pathParams = {
        'respondentId': respondentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/irsPractitioners/{respondentId}/cases', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the judgesOptions operation.
     * @callback moduleapi/DefaultApi~judgesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~judgesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    judgesOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/judges', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesCaseDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~messagesCaseDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~messagesCaseDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesCaseDocketNumberOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling messagesCaseDocketNumberOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/case/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesCompletedSectionSectionIdOptions operation.
     * @callback moduleapi/DefaultApi~messagesCompletedSectionSectionIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sectionId 
     * @param {module:api/DefaultApi~messagesCompletedSectionSectionIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesCompletedSectionSectionIdOptions(sectionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling messagesCompletedSectionSectionIdOptions");
      }

      let pathParams = {
        'sectionId': sectionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/completed/section/{sectionId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesCompletedUserIdOptions operation.
     * @callback moduleapi/DefaultApi~messagesCompletedUserIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~messagesCompletedUserIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesCompletedUserIdOptions(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling messagesCompletedUserIdOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/completed/{userId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesInboxSectionSectionOptions operation.
     * @callback moduleapi/DefaultApi~messagesInboxSectionSectionOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} section 
     * @param {module:api/DefaultApi~messagesInboxSectionSectionOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesInboxSectionSectionOptions(section, callback) {
      
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling messagesInboxSectionSectionOptions");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/inbox/section/{section}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesInboxUserIdOptions operation.
     * @callback moduleapi/DefaultApi~messagesInboxUserIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~messagesInboxUserIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesInboxUserIdOptions(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling messagesInboxUserIdOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/inbox/{userId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesMessageIdOptions operation.
     * @callback moduleapi/DefaultApi~messagesMessageIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} messageId 
     * @param {module:api/DefaultApi~messagesMessageIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesMessageIdOptions(messageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling messagesMessageIdOptions");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/{messageId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesMessageIdReadOptions operation.
     * @callback moduleapi/DefaultApi~messagesMessageIdReadOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} messageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/MessageIdReadBody1} opts.body the associated docket number
     * @param {module:api/DefaultApi~messagesMessageIdReadOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesMessageIdReadOptions(messageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling messagesMessageIdReadOptions");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/{messageId}/read', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesOptions operation.
     * @callback moduleapi/DefaultApi~messagesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~messagesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesOutboxSectionSectionOptions operation.
     * @callback moduleapi/DefaultApi~messagesOutboxSectionSectionOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} section 
     * @param {module:api/DefaultApi~messagesOutboxSectionSectionOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesOutboxSectionSectionOptions(section, callback) {
      
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling messagesOutboxSectionSectionOptions");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/outbox/section/{section}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesOutboxUserIdOptions operation.
     * @callback moduleapi/DefaultApi~messagesOutboxUserIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~messagesOutboxUserIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesOutboxUserIdOptions(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling messagesOutboxUserIdOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/outbox/{userId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesParentMessageIdCompleteOptions operation.
     * @callback moduleapi/DefaultApi~messagesParentMessageIdCompleteOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} parentMessageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParentMessageIdCompleteBody1} opts.body the message info
     * @param {module:api/DefaultApi~messagesParentMessageIdCompleteOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesParentMessageIdCompleteOptions(parentMessageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'parentMessageId' is set
      if (parentMessageId === undefined || parentMessageId === null) {
        throw new Error("Missing the required parameter 'parentMessageId' when calling messagesParentMessageIdCompleteOptions");
      }

      let pathParams = {
        'parentMessageId': parentMessageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/{parentMessageId}/complete', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesParentMessageIdForwardOptions operation.
     * @callback moduleapi/DefaultApi~messagesParentMessageIdForwardOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} parentMessageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParentMessageIdForwardBody1} opts.body the message info
     * @param {module:api/DefaultApi~messagesParentMessageIdForwardOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesParentMessageIdForwardOptions(parentMessageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'parentMessageId' is set
      if (parentMessageId === undefined || parentMessageId === null) {
        throw new Error("Missing the required parameter 'parentMessageId' when calling messagesParentMessageIdForwardOptions");
      }

      let pathParams = {
        'parentMessageId': parentMessageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/{parentMessageId}/forward', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesParentMessageIdReplyOptions operation.
     * @callback moduleapi/DefaultApi~messagesParentMessageIdReplyOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} parentMessageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParentMessageIdReplyBody1} opts.body the message info
     * @param {module:api/DefaultApi~messagesParentMessageIdReplyOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesParentMessageIdReplyOptions(parentMessageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'parentMessageId' is set
      if (parentMessageId === undefined || parentMessageId === null) {
        throw new Error("Missing the required parameter 'parentMessageId' when calling messagesParentMessageIdReplyOptions");
      }

      let pathParams = {
        'parentMessageId': parentMessageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/messages/{parentMessageId}/reply', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the practitionersBarNumberOptions operation.
     * @callback moduleapi/DefaultApi~practitionersBarNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} barNumber 
     * @param {module:api/DefaultApi~practitionersBarNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    practitionersBarNumberOptions(barNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'barNumber' is set
      if (barNumber === undefined || barNumber === null) {
        throw new Error("Missing the required parameter 'barNumber' when calling practitionersBarNumberOptions");
      }

      let pathParams = {
        'barNumber': barNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/practitioners/{barNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the practitionersOptions operation.
     * @callback moduleapi/DefaultApi~practitionersOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {module:api/DefaultApi~practitionersOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    practitionersOptions(name, callback) {
      
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling practitionersOptions");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/practitioners', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiCasesDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~publicApiCasesDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~publicApiCasesDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiCasesDocketNumberOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling publicApiCasesDocketNumberOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/cases/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiDocketNumberKeyPublicDocumentDownloadUrlOptions operation.
     * @callback moduleapi/DefaultApi~publicApiDocketNumberKeyPublicDocumentDownloadUrlOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {String} key 
     * @param {module:api/DefaultApi~publicApiDocketNumberKeyPublicDocumentDownloadUrlOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiDocketNumberKeyPublicDocumentDownloadUrlOptions(docketNumber, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling publicApiDocketNumberKeyPublicDocumentDownloadUrlOptions");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling publicApiDocketNumberKeyPublicDocumentDownloadUrlOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/{docketNumber}/{key}/public-document-download-url', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiDocketNumberSearchDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~publicApiDocketNumberSearchDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~publicApiDocketNumberSearchDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiDocketNumberSearchDocketNumberOptions(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling publicApiDocketNumberSearchDocketNumberOptions");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/docket-number-search/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiHealthOptions operation.
     * @callback moduleapi/DefaultApi~publicApiHealthOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~publicApiHealthOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiHealthOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/health', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiOpinionSearchOptions operation.
     * @callback moduleapi/DefaultApi~publicApiOpinionSearchOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~publicApiOpinionSearchOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiOpinionSearchOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/opinion-search', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiOrderSearchOptions operation.
     * @callback moduleapi/DefaultApi~publicApiOrderSearchOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~publicApiOrderSearchOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiOrderSearchOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/order-search', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiSearchOptions operation.
     * @callback moduleapi/DefaultApi~publicApiSearchOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~publicApiSearchOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiSearchOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/search', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiTodaysOpinionsOptions operation.
     * @callback moduleapi/DefaultApi~publicApiTodaysOpinionsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~publicApiTodaysOpinionsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiTodaysOpinionsOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/todays-opinions', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiTodaysOrdersPageSortOrderOptions operation.
     * @callback moduleapi/DefaultApi~publicApiTodaysOrdersPageSortOrderOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} page 
     * @param {String} sortOrder 
     * @param {module:api/DefaultApi~publicApiTodaysOrdersPageSortOrderOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiTodaysOrdersPageSortOrderOptions(page, sortOrder, callback) {
      
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling publicApiTodaysOrdersPageSortOrderOptions");
      }
      // verify the required parameter 'sortOrder' is set
      if (sortOrder === undefined || sortOrder === null) {
        throw new Error("Missing the required parameter 'sortOrder' when calling publicApiTodaysOrdersPageSortOrderOptions");
      }

      let pathParams = {
        'page': page,'sortOrder': sortOrder
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/todays-orders/{page}/{sortOrder}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsBlockedTrialLocationOptions operation.
     * @callback moduleapi/DefaultApi~reportsBlockedTrialLocationOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialLocation 
     * @param {module:api/DefaultApi~reportsBlockedTrialLocationOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsBlockedTrialLocationOptions(trialLocation, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialLocation' is set
      if (trialLocation === undefined || trialLocation === null) {
        throw new Error("Missing the required parameter 'trialLocation' when calling reportsBlockedTrialLocationOptions");
      }

      let pathParams = {
        'trialLocation': trialLocation
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/blocked/{trialLocation}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsCaseInventoryReportOptions operation.
     * @callback moduleapi/DefaultApi~reportsCaseInventoryReportOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.associatedJudge 
     * @param {Number} opts.from 
     * @param {Number} opts.pageSize 
     * @param {String} opts.status 
     * @param {module:api/DefaultApi~reportsCaseInventoryReportOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsCaseInventoryReportOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'associatedJudge': opts['associatedJudge'],'from': opts['from'],'pageSize': opts['pageSize'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/case-inventory-report', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsPendingItemsGet operation.
     * @callback moduleapi/DefaultApi~reportsPendingItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all pending items
     * get all pending items. 
     * @param {module:api/DefaultApi~reportsPendingItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    reportsPendingItemsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/reports/pending-items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsPendingItemsOptions operation.
     * @callback moduleapi/DefaultApi~reportsPendingItemsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~reportsPendingItemsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsPendingItemsOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/pending-items', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsPendingReportGet operation.
     * @callback moduleapi/DefaultApi~reportsPendingReportGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a pdf of the pending report
     * create a pdf of the pending report. 
     * @param {module:api/DefaultApi~reportsPendingReportGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsPendingReportGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/pending-report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsPendingReportOptions operation.
     * @callback moduleapi/DefaultApi~reportsPendingReportOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~reportsPendingReportOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsPendingReportOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/pending-report', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsPlanningReportOptions operation.
     * @callback moduleapi/DefaultApi~reportsPlanningReportOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~reportsPlanningReportOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsPlanningReportOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/planning-report', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsPlanningReportPost operation.
     * @callback moduleapi/DefaultApi~reportsPlanningReportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a pdf of the trial session planning report
     * create a pdf of the trial session planning report. 
     * @param {module:api/DefaultApi~reportsPlanningReportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsPlanningReportPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/planning-report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsPrintableCaseInventoryReportOptions operation.
     * @callback moduleapi/DefaultApi~reportsPrintableCaseInventoryReportOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.associatedJudge 
     * @param {String} opts.status 
     * @param {module:api/DefaultApi~reportsPrintableCaseInventoryReportOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsPrintableCaseInventoryReportOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'associatedJudge': opts['associatedJudge'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/printable-case-inventory-report', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsTrialCalendarPdfOptions operation.
     * @callback moduleapi/DefaultApi~reportsTrialCalendarPdfOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~reportsTrialCalendarPdfOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsTrialCalendarPdfOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/trial-calendar-pdf', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportsTrialCalendarPdfPost operation.
     * @callback moduleapi/DefaultApi~reportsTrialCalendarPdfPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a pdf of the trial session calendar
     * create a pdf of the trial session calendar. 
     * @param {module:api/DefaultApi~reportsTrialCalendarPdfPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportsTrialCalendarPdfPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reports/trial-calendar-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sectionsSectionDocumentQcInboxOptions operation.
     * @callback moduleapi/DefaultApi~sectionsSectionDocumentQcInboxOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} section 
     * @param {Object} opts Optional parameters
     * @param {String} opts.judgeUserName 
     * @param {module:api/DefaultApi~sectionsSectionDocumentQcInboxOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sectionsSectionDocumentQcInboxOptions(section, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling sectionsSectionDocumentQcInboxOptions");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        'judgeUserName': opts['judgeUserName']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sections/{section}/document-qc/inbox', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sectionsSectionDocumentQcServedOptions operation.
     * @callback moduleapi/DefaultApi~sectionsSectionDocumentQcServedOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} section 
     * @param {module:api/DefaultApi~sectionsSectionDocumentQcServedOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sectionsSectionDocumentQcServedOptions(section, callback) {
      
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling sectionsSectionDocumentQcServedOptions");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sections/{section}/document-qc/served', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sectionsSectionUsersOptions operation.
     * @callback moduleapi/DefaultApi~sectionsSectionUsersOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} section 
     * @param {module:api/DefaultApi~sectionsSectionUsersOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sectionsSectionUsersOptions(section, callback) {
      
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling sectionsSectionUsersOptions");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sections/{section}/users', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~trialSessionsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdCasesDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdCasesDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdCasesDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdCasesDocketNumberOptions(trialSessionId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdCasesDocketNumberOptions");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling trialSessionsTrialSessionIdCasesDocketNumberOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/cases/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdEligibleCasesOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdEligibleCasesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdEligibleCasesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdEligibleCasesOptions(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdEligibleCasesOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/eligible-cases', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdGenerateNoticesOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdGenerateNoticesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdGenerateNoticesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdGenerateNoticesOptions(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdGenerateNoticesOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/generate-notices', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdGetAssociatedCasesOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdGetAssociatedCasesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdGetAssociatedCasesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdGetAssociatedCasesOptions(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdGetAssociatedCasesOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/getAssociatedCases', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdOptions(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdPrintableWorkingCopyOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdPrintableWorkingCopyOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/TrialSessionIdPrintableworkingcopyBody1} opts.body the trial session info needed to print a working copy
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdPrintableWorkingCopyOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdPrintableWorkingCopyOptions(trialSessionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdPrintableWorkingCopyOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/printable-working-copy', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdRemoveCaseDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdRemoveCaseDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdRemoveCaseDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdRemoveCaseDocketNumberOptions(trialSessionId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdRemoveCaseDocketNumberOptions");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling trialSessionsTrialSessionIdRemoveCaseDocketNumberOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/remove-case/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdSetCalendarOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdSetCalendarOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdSetCalendarOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdSetCalendarOptions(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdSetCalendarOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/set-calendar', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdSetHearingDocketNumberOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdSetHearingDocketNumberOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdSetHearingDocketNumberOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdSetHearingDocketNumberOptions(trialSessionId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdSetHearingDocketNumberOptions");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling trialSessionsTrialSessionIdSetHearingDocketNumberOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/set-hearing/{docketNumber}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdSetSwingSessionOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdSetSwingSessionOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdSetSwingSessionOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdSetSwingSessionOptions(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdSetSwingSessionOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/set-swing-session', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the trialSessionsTrialSessionIdWorkingCopyOptions operation.
     * @callback moduleapi/DefaultApi~trialSessionsTrialSessionIdWorkingCopyOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trialSessionId 
     * @param {module:api/DefaultApi~trialSessionsTrialSessionIdWorkingCopyOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trialSessionsTrialSessionIdWorkingCopyOptions(trialSessionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trialSessionId' is set
      if (trialSessionId === undefined || trialSessionId === null) {
        throw new Error("Missing the required parameter 'trialSessionId' when calling trialSessionsTrialSessionIdWorkingCopyOptions");
      }

      let pathParams = {
        'trialSessionId': trialSessionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trial-sessions/{trialSessionId}/working-copy', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersInternalOptions operation.
     * @callback moduleapi/DefaultApi~usersInternalOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~usersInternalOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersInternalOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/internal', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersOptions operation.
     * @callback moduleapi/DefaultApi~usersOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~usersOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersPendingEmailOptions operation.
     * @callback moduleapi/DefaultApi~usersPendingEmailOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~usersPendingEmailOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersPendingEmailOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/pending-email', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdCaseDocketNumberPendingOptions operation.
     * @callback moduleapi/DefaultApi~usersUserIdCaseDocketNumberPendingOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {String} docketNumber 
     * @param {module:api/DefaultApi~usersUserIdCaseDocketNumberPendingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdCaseDocketNumberPendingOptions(userId, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCaseDocketNumberPendingOptions");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling usersUserIdCaseDocketNumberPendingOptions");
      }

      let pathParams = {
        'userId': userId,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/case/{docketNumber}/pending', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdCasesOptions operation.
     * @callback moduleapi/DefaultApi~usersUserIdCasesOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdCasesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdCasesOptions(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCasesOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/cases', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdContactInfoOptions operation.
     * @callback moduleapi/DefaultApi~usersUserIdContactInfoOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdContactInfoOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdContactInfoOptions(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdContactInfoOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/contact-info', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdDocumentQcInboxOptions operation.
     * @callback moduleapi/DefaultApi~usersUserIdDocumentQcInboxOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdDocumentQcInboxOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdDocumentQcInboxOptions(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDocumentQcInboxOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/document-qc/inbox', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdDocumentQcServedOptions operation.
     * @callback moduleapi/DefaultApi~usersUserIdDocumentQcServedOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdDocumentQcServedOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdDocumentQcServedOptions(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDocumentQcServedOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/document-qc/served', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdPendingEmailOptions operation.
     * @callback moduleapi/DefaultApi~usersUserIdPendingEmailOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdPendingEmailOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdPendingEmailOptions(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPendingEmailOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/pending-email', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsOptions operation.
     * @callback moduleapi/DefaultApi~workItemsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~workItemsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workItemsOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/work-items', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdAssigneeOptions operation.
     * @callback moduleapi/DefaultApi~workItemsWorkItemIdAssigneeOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workItemId 
     * @param {module:api/DefaultApi~workItemsWorkItemIdAssigneeOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workItemsWorkItemIdAssigneeOptions(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdAssigneeOptions");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/work-items/{workItemId}/assignee', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdCompleteOptions operation.
     * @callback moduleapi/DefaultApi~workItemsWorkItemIdCompleteOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workItemId 
     * @param {module:api/DefaultApi~workItemsWorkItemIdCompleteOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workItemsWorkItemIdCompleteOptions(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdCompleteOptions");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/work-items/{workItemId}/complete', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdOptions operation.
     * @callback moduleapi/DefaultApi~workItemsWorkItemIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workItemId 
     * @param {module:api/DefaultApi~workItemsWorkItemIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workItemsWorkItemIdOptions(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdOptions");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/work-items/{workItemId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdReadOptions operation.
     * @callback moduleapi/DefaultApi~workItemsWorkItemIdReadOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workItemId 
     * @param {module:api/DefaultApi~workItemsWorkItemIdReadOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workItemsWorkItemIdReadOptions(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdReadOptions");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/work-items/{workItemId}/read', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DocketEntry} from '../model/DocketEntry';
import {Document} from '../model/Document';
import {ModelCase} from '../model/ModelCase';
import {PolicyUrl} from '../model/PolicyUrl';

/**
* Documents service.
* @module api/DocumentsApi
* @version 2019-03-06T15:30:48Z
*/
export class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryCompletePut operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryCompletePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * completes a docket entry on a case that was previously in progress
     * Completes a docket entry on a case that was previously in progress. 
     * @param {String} docketNumber 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryCompletePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryCompletePut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryCompletePut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/docket-entry-complete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdDelete operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a document from a case
     * Deletes a document from a case and from S3. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdDelete(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdDelete");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdDelete");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdPut operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * archives a document on a case, but does not delete it
     * Archives a document on a case, but does not delete it. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdPut(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdPut");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdPut");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdSealPut operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdSealPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocketEntry{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * seals a docket entry on a case to the public
     * Seals a docket entry on a case to the public. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdSealPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryIdSealPut(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdSealPut");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdSealPut");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocketEntry;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/seal', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdSignPost operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdSignPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a copy of an existing document, adds a signature, and adds it to the associated case
     * creates a copy of an existing document, adds a signature, and adds it to the associated case. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdSignPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdSignPost(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdSignPost");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdSignPost");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/sign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdStrikePut operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdStrikePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * strike a docket entry on the docket record
     * Strike a docket entry on the docket record. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdStrikePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryIdStrikePut(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdStrikePut");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdStrikePut");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/strike', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdUnsealPut operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdUnsealPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocketEntry{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * unseals a docket entry on a case
     * Unseals a docket entry on a case. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryIdUnsealPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryIdUnsealPut(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdUnsealPut");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdUnsealPut");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocketEntry;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/unseal', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryInProgressPut operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryInProgressPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a current docket entry on a case that is in progress
     * Updates a docket entry on a case that is in progress. 
     * @param {String} docketNumber 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryInProgressPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryInProgressPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryInProgressPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/docket-entry-in-progress', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryMetaPut operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberDocketEntryMetaPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the docket entry meta data on a case
     * Updates the docket entry meta on a case. 
     * @param {String} docketNumber 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberDocketEntryMetaPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryMetaPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryMetaPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/docket-entry-meta', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberExternalDocumentPost operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberExternalDocumentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * file a new external document on a case
     * Creates a new external document and attaches it to a case. It will also create a work item. 
     * @param {String} docketNumber 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberExternalDocumentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberExternalDocumentPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberExternalDocumentPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/external-document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberKeyDocumentDownloadUrlGet operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberKeyDocumentDownloadUrlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * redirects to the s3 url for downloading a document
     * Create and redirects the user to a pre-signed url for document downloads from S3. 
     * @param {String} docketNumber 
     * @param {String} key 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberKeyDocumentDownloadUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberKeyDocumentDownloadUrlGet(docketNumber, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberKeyDocumentDownloadUrlGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling caseDocumentsDocketNumberKeyDocumentDownloadUrlGet");
      }

      let pathParams = {
        'docketNumber': docketNumber,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{key}/document-download-url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberKeyDownloadPolicyUrlGet operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberKeyDownloadPolicyUrlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyUrl{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a pre-signed url for downloads
     * Create a pre-signed url for  document downloads from S3. 
     * @param {String} key 
     * @param {String} docketNumber 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberKeyDownloadPolicyUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberKeyDownloadPolicyUrlGet(key, docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling caseDocumentsDocketNumberKeyDownloadPolicyUrlGet");
      }
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberKeyDownloadPolicyUrlGet");
      }

      let pathParams = {
        'key': key,'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyUrl;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{key}/download-policy-url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberPaperFilingPost operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberPaperFilingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * file a new paper docket entry on a case
     * Creates a new paper docket entry/document and attaches it to a case. 
     * @param {String} docketNumber 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberPaperFilingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberPaperFilingPost(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberPaperFilingPost");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/paper-filing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberPaperFilingPut operation.
     * @callback moduleapi/DocumentsApi~caseDocumentsDocketNumberPaperFilingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a current paper docket entry on a case
     * Updates a paper docket entry/document and attaches it to a case. 
     * @param {String} docketNumber 
     * @param {module:api/DocumentsApi~caseDocumentsDocketNumberPaperFilingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberPaperFilingPut(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberPaperFilingPut");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCase;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/paper-filing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentsKeyValidatePost operation.
     * @callback moduleapi/DocumentsApi~documentsKeyValidatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * triggers the pdf validation function
     * Endpoint that triggers the PDF validation function for the specified document. 
     * @param {String} key 
     * @param {module:api/DocumentsApi~documentsKeyValidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsKeyValidatePost(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling documentsKeyValidatePost");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/{key}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentsKeyVirusScanGet operation.
     * @callback moduleapi/DocumentsApi~documentsKeyVirusScanGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the status of the virus scan for the document
     * Endpoint that the status of the virus scan for the document. 
     * @param {String} key 
     * @param {module:api/DocumentsApi~documentsKeyVirusScanGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsKeyVirusScanGet(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling documentsKeyVirusScanGet");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/{key}/virus-scan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentsUploadPolicyGet operation.
     * @callback moduleapi/DocumentsApi~documentsUploadPolicyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyUrl{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a pre-signed url for uploads
     * Create a pre-signed url for  document uploads to S3. 
     * @param {module:api/DocumentsApi~documentsUploadPolicyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    documentsUploadPolicyGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyUrl;

      return this.apiClient.callApi(
        '/documents/upload-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiDocketNumberKeyPublicDocumentDownloadUrlGet operation.
     * @callback moduleapi/DocumentsApi~publicApiDocketNumberKeyPublicDocumentDownloadUrlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * redirects to the s3 url for downloading a public document
     * Create and redirects the user to a pre-signed url for document downloads from S3. 
     * @param {String} docketNumber 
     * @param {String} key 
     * @param {module:api/DocumentsApi~publicApiDocketNumberKeyPublicDocumentDownloadUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publicApiDocketNumberKeyPublicDocumentDownloadUrlGet(docketNumber, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling publicApiDocketNumberKeyPublicDocumentDownloadUrlGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling publicApiDocketNumberKeyPublicDocumentDownloadUrlGet");
      }

      let pathParams = {
        'docketNumber': docketNumber,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/public-api/{docketNumber}/{key}/public-document-download-url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
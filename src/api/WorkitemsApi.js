/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Notifications} from '../model/Notifications';
import {User} from '../model/User';
import {WorkItem} from '../model/WorkItem';

/**
* Workitems service.
* @module api/WorkitemsApi
* @version 2019-03-06T15:30:48Z
*/
export class WorkitemsApi {

    /**
    * Constructs a new WorkitemsApi. 
    * @alias module:api/WorkitemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiNotificationsGet operation.
     * @callback moduleapi/WorkitemsApi~apiNotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notifications{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets notifications such as unread item counts
     * Get notifications. 
     * @param {module:api/WorkitemsApi~apiNotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiNotificationsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Notifications;

      return this.apiClient.callApi(
        '/api/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdCoversheetPost operation.
     * @callback moduleapi/WorkitemsApi~caseDocumentsDocketNumberDocketEntryIdCoversheetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a coversheet and prepends it to the existing s3 document
     * creates a coversheet and prepends it to the existing s3 document. 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/WorkitemsApi~caseDocumentsDocketNumberDocketEntryIdCoversheetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    caseDocumentsDocketNumberDocketEntryIdCoversheetPost(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdCoversheetPost");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdCoversheetPost");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/coversheet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdWorkItemsPost operation.
     * @callback moduleapi/WorkitemsApi~caseDocumentsDocketNumberDocketEntryIdWorkItemsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new work item and attaches it to the case document
     * creates a new work item and attaches it to the case document 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/WorkitemsApi~caseDocumentsDocketNumberDocketEntryIdWorkItemsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryIdWorkItemsPost(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdWorkItemsPost");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdWorkItemsPost");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/work-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sectionsSectionDocumentQcInboxGet operation.
     * @callback moduleapi/WorkitemsApi~sectionsSectionDocumentQcInboxGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the section document qc inbox work items
     * get the section document qc inbox work items. 
     * @param {String} section 
     * @param {Object} opts Optional parameters
     * @param {String} opts.judgeUserName 
     * @param {module:api/WorkitemsApi~sectionsSectionDocumentQcInboxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sectionsSectionDocumentQcInboxGet(section, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling sectionsSectionDocumentQcInboxGet");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        'judgeUserName': opts['judgeUserName']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/sections/{section}/document-qc/inbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sectionsSectionDocumentQcServedGet operation.
     * @callback moduleapi/WorkitemsApi~sectionsSectionDocumentQcServedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the section document qc served work items
     * get the section document qc served work items. 
     * @param {String} section 
     * @param {module:api/WorkitemsApi~sectionsSectionDocumentQcServedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sectionsSectionDocumentQcServedGet(section, callback) {
      
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling sectionsSectionDocumentQcServedGet");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/sections/{section}/document-qc/served', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sectionsSectionUsersGet operation.
     * @callback moduleapi/WorkitemsApi~sectionsSectionUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all users in a section
     * get all users in a section 
     * @param {String} section 
     * @param {module:api/WorkitemsApi~sectionsSectionUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sectionsSectionUsersGet(section, callback) {
      
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling sectionsSectionUsersGet");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/sections/{section}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersInternalGet operation.
     * @callback moduleapi/WorkitemsApi~usersInternalGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all internal users
     * get all internal users 
     * @param {module:api/WorkitemsApi~usersInternalGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersInternalGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/internal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdDocumentQcInboxGet operation.
     * @callback moduleapi/WorkitemsApi~usersUserIdDocumentQcInboxGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the inbox items from the users document qc section
     * get the inbox items from the users document qc section 
     * @param {String} userId 
     * @param {module:api/WorkitemsApi~usersUserIdDocumentQcInboxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUserIdDocumentQcInboxGet(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDocumentQcInboxGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/users/{userId}/document-qc/inbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdDocumentQcServedGet operation.
     * @callback moduleapi/WorkitemsApi~usersUserIdDocumentQcServedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the served items from the users document qc section
     * get the served items from the users document qc section 
     * @param {String} userId 
     * @param {module:api/WorkitemsApi~usersUserIdDocumentQcServedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUserIdDocumentQcServedGet(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDocumentQcServedGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/users/{userId}/document-qc/served', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsPut operation.
     * @callback moduleapi/WorkitemsApi~workItemsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * assigns an assigneId to a list of work item ids
     * Get a workitem. 
     * @param {module:api/WorkitemsApi~workItemsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workItemsPut(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/work-items', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdAssigneePut operation.
     * @callback moduleapi/WorkitemsApi~workItemsWorkItemIdAssigneePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets the assigneeId of the workitem to a new user
     * sets the assigneeId of the workitem to a new user. 
     * @param {String} workItemId 
     * @param {module:api/WorkitemsApi~workItemsWorkItemIdAssigneePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workItemsWorkItemIdAssigneePut(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdAssigneePut");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/work-items/{workItemId}/assignee', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdCompletePut operation.
     * @callback moduleapi/WorkitemsApi~workItemsWorkItemIdCompletePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * marks the workitem complete
     * marks the workitem complete. 
     * @param {String} workItemId 
     * @param {module:api/WorkitemsApi~workItemsWorkItemIdCompletePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workItemsWorkItemIdCompletePut(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdCompletePut");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/work-items/{workItemId}/complete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdGet operation.
     * @callback moduleapi/WorkitemsApi~workItemsWorkItemIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a workitem by workItemId
     * Get a workitem. 
     * @param {String} workItemId 
     * @param {module:api/WorkitemsApi~workItemsWorkItemIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workItemsWorkItemIdGet(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdGet");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/work-items/{workItemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdPut operation.
     * @callback moduleapi/WorkitemsApi~workItemsWorkItemIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a workitem by workItemId
     * Update a workitem. 
     * @param {String} workItemId 
     * @param {module:api/WorkitemsApi~workItemsWorkItemIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workItemsWorkItemIdPut(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdPut");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/work-items/{workItemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workItemsWorkItemIdReadPost operation.
     * @callback moduleapi/WorkitemsApi~workItemsWorkItemIdReadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * marks the work item as read
     * marks the work item as read. 
     * @param {String} workItemId 
     * @param {module:api/WorkitemsApi~workItemsWorkItemIdReadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workItemsWorkItemIdReadPost(workItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling workItemsWorkItemIdReadPost");
      }

      let pathParams = {
        'workItemId': workItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItem;

      return this.apiClient.callApi(
        '/work-items/{workItemId}/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
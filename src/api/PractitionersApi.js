/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {User} from '../model/User';

/**
* Practitioners service.
* @module api/PractitionersApi
* @version 2019-03-06T15:30:48Z
*/
export class PractitionersApi {

    /**
    * Constructs a new PractitionersApi. 
    * @alias module:api/PractitionersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the practitionersBarNumberGet operation.
     * @callback moduleapi/PractitionersApi~practitionersBarNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the practitioner via bar number
     * Get the practitioner via bar number. 
     * @param {String} barNumber 
     * @param {module:api/PractitionersApi~practitionersBarNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    practitionersBarNumberGet(barNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'barNumber' is set
      if (barNumber === undefined || barNumber === null) {
        throw new Error("Missing the required parameter 'barNumber' when calling practitionersBarNumberGet");
      }

      let pathParams = {
        'barNumber': barNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/practitioners/{barNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the practitionersBarNumberPut operation.
     * @callback moduleapi/PractitionersApi~practitionersBarNumberPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a practitioner user
     * updates a practitioner user. 
     * @param {String} barNumber 
     * @param {module:api/PractitionersApi~practitionersBarNumberPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    practitionersBarNumberPut(barNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'barNumber' is set
      if (barNumber === undefined || barNumber === null) {
        throw new Error("Missing the required parameter 'barNumber' when calling practitionersBarNumberPut");
      }

      let pathParams = {
        'barNumber': barNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/practitioners/{barNumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the practitionersGet operation.
     * @callback moduleapi/PractitionersApi~practitionersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets a practitioner by name
     * Gets a practitioner by name. 
     * @param {String} name 
     * @param {module:api/PractitionersApi~practitionersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    practitionersGet(name, callback) {
      
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling practitionersGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/practitioners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the practitionersPost operation.
     * @callback moduleapi/PractitionersApi~practitionersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a practitioner user
     * creates a practitioner user. 
     * @param {String} name 
     * @param {module:api/PractitionersApi~practitionersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    practitionersPost(name, callback) {
      
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling practitionersPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/practitioners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the practitionersUserIdPrintableCaseListGet operation.
     * @callback moduleapi/PractitionersApi~practitionersUserIdPrintableCaseListGetCallback
     * @param {String} error Error message, if any.
     * @param {File{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * generates a printable case list for the practitioner userId provided
     * Generates a printable case list for the practitioner userId provided. 
     * @param {String} userId 
     * @param {module:api/PractitionersApi~practitionersUserIdPrintableCaseListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    practitionersUserIdPrintableCaseListGet(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling practitionersUserIdPrintableCaseListGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;

      return this.apiClient.callApi(
        '/practitioners/{userId}/printable-case-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
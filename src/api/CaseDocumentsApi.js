/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Document} from '../model/Document';
import {DocumentContents} from '../model/DocumentContents';

/**
* CaseDocuments service.
* @module api/CaseDocumentsApi
* @version 2019-03-06T15:30:48Z
*/
export class CaseDocumentsApi {

    /**
    * Constructs a new CaseDocumentsApi. 
    * @alias module:api/CaseDocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the caseDocumentsDocketEntryIdAppendPdfPost operation.
     * @callback moduleapi/CaseDocumentsApi~caseDocumentsDocketEntryIdAppendPdfPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * appends a form pdf to the document with the corresponding docketEntryId
     * Appends a form pdf to the document with the corresponding docketEntryId. 
     * @param {String} docketEntryId 
     * @param {module:api/CaseDocumentsApi~caseDocumentsDocketEntryIdAppendPdfPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketEntryIdAppendPdfPost(docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketEntryIdAppendPdfPost");
      }

      let pathParams = {
        'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/case-documents/{docketEntryId}/append-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocketNumberDocketEntryIdRemovePdfPost operation.
     * @callback moduleapi/CaseDocumentsApi~caseDocumentsDocketNumberDocketEntryIdRemovePdfPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes the pdf from a given docket entry
     * Deletes the pdf from a given docket entry 
     * @param {String} docketNumber 
     * @param {String} docketEntryId 
     * @param {module:api/CaseDocumentsApi~caseDocumentsDocketNumberDocketEntryIdRemovePdfPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocketNumberDocketEntryIdRemovePdfPost(docketNumber, docketEntryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling caseDocumentsDocketNumberDocketEntryIdRemovePdfPost");
      }
      // verify the required parameter 'docketEntryId' is set
      if (docketEntryId === undefined || docketEntryId === null) {
        throw new Error("Missing the required parameter 'docketEntryId' when calling caseDocumentsDocketNumberDocketEntryIdRemovePdfPost");
      }

      let pathParams = {
        'docketNumber': docketNumber,'docketEntryId': docketEntryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/case-documents/{docketNumber}/{docketEntryId}/remove-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsDocumentContentsIdDocumentContentsGet operation.
     * @callback moduleapi/CaseDocumentsApi~caseDocumentsDocumentContentsIdDocumentContentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentContents{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieves document contents for a given document contents id
     * Retrieves document&#x27;s contents from S3 for a given ID. 
     * @param {String} documentContentsId 
     * @param {module:api/CaseDocumentsApi~caseDocumentsDocumentContentsIdDocumentContentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsDocumentContentsIdDocumentContentsGet(documentContentsId, callback) {
      
      let postBody = null;
      // verify the required parameter 'documentContentsId' is set
      if (documentContentsId === undefined || documentContentsId === null) {
        throw new Error("Missing the required parameter 'documentContentsId' when calling caseDocumentsDocumentContentsIdDocumentContentsGet");
      }

      let pathParams = {
        'documentContentsId': documentContentsId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentContents;

      return this.apiClient.callApi(
        '/case-documents/{documentContentsId}/document-contents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the caseDocumentsOrderSearchGet operation.
     * @callback moduleapi/CaseDocumentsApi~caseDocumentsOrderSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search for an order-related document type by keyword within its title or contents
     * Search for an order-related document type by keyword within its title or contents. 
     * @param {module:api/CaseDocumentsApi~caseDocumentsOrderSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    caseDocumentsOrderSearchGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/case-documents/order-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiTodaysOpinionsGet operation.
     * @callback moduleapi/CaseDocumentsApi~publicApiTodaysOpinionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the opinions created for the current date
     * Returns the opinions created for the current date. 
     * @param {module:api/CaseDocumentsApi~publicApiTodaysOpinionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicApiTodaysOpinionsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/public-api/todays-opinions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicApiTodaysOrdersPageSortOrderGet operation.
     * @callback moduleapi/CaseDocumentsApi~publicApiTodaysOrdersPageSortOrderGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the orders served on the current date
     * Returns the orders served on the current date. 
     * @param {String} page 
     * @param {String} sortOrder 
     * @param {module:api/CaseDocumentsApi~publicApiTodaysOrdersPageSortOrderGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicApiTodaysOrdersPageSortOrderGet(page, sortOrder, callback) {
      
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling publicApiTodaysOrdersPageSortOrderGet");
      }
      // verify the required parameter 'sortOrder' is set
      if (sortOrder === undefined || sortOrder === null) {
        throw new Error("Missing the required parameter 'sortOrder' when calling publicApiTodaysOrdersPageSortOrderGet");
      }

      let pathParams = {
        'page': page,'sortOrder': sortOrder
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/public-api/todays-orders/{page}/{sortOrder}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
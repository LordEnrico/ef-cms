/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Message} from '../model/Message';
import {MessageIdReadBody} from '../model/MessageIdReadBody';
import {ParentMessageIdCompleteBody} from '../model/ParentMessageIdCompleteBody';
import {ParentMessageIdForwardBody} from '../model/ParentMessageIdForwardBody';
import {ParentMessageIdReplyBody} from '../model/ParentMessageIdReplyBody';

/**
* Messages service.
* @module api/MessagesApi
* @version 2019-03-06T15:30:48Z
*/
export class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the messagesCaseDocketNumberGet operation.
     * @callback moduleapi/MessagesApi~messagesCaseDocketNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the messages for the specific case
     * Gets the messages for the specific case. 
     * @param {String} docketNumber 
     * @param {module:api/MessagesApi~messagesCaseDocketNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesCaseDocketNumberGet(docketNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'docketNumber' is set
      if (docketNumber === undefined || docketNumber === null) {
        throw new Error("Missing the required parameter 'docketNumber' when calling messagesCaseDocketNumberGet");
      }

      let pathParams = {
        'docketNumber': docketNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/case/{docketNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesCompletedSectionSectionIdGet operation.
     * @callback moduleapi/MessagesApi~messagesCompletedSectionSectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the completed messages for the specific section
     * Gets the completed messages for the specific user section. 
     * @param {String} sectionId 
     * @param {module:api/MessagesApi~messagesCompletedSectionSectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesCompletedSectionSectionIdGet(sectionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling messagesCompletedSectionSectionIdGet");
      }

      let pathParams = {
        'sectionId': sectionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/completed/section/{sectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesCompletedUserIdGet operation.
     * @callback moduleapi/MessagesApi~messagesCompletedUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the completed messages for the specific user
     * Gets the completed messages for the specific user. 
     * @param {String} userId 
     * @param {module:api/MessagesApi~messagesCompletedUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesCompletedUserIdGet(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling messagesCompletedUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/completed/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesInboxSectionSectionGet operation.
     * @callback moduleapi/MessagesApi~messagesInboxSectionSectionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the inbox messages for the specific section
     * Gets the inbox messages for the specific user section. 
     * @param {String} section 
     * @param {module:api/MessagesApi~messagesInboxSectionSectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesInboxSectionSectionGet(section, callback) {
      
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling messagesInboxSectionSectionGet");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/inbox/section/{section}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesInboxUserIdGet operation.
     * @callback moduleapi/MessagesApi~messagesInboxUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the inbox messages for the specific user id
     * Gets the inbox messages for the specific user id. 
     * @param {String} userId 
     * @param {module:api/MessagesApi~messagesInboxUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesInboxUserIdGet(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling messagesInboxUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/inbox/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesMessageIdGet operation.
     * @callback moduleapi/MessagesApi~messagesMessageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the message for the specific id
     * Gets the message for the specific id. 
     * @param {String} messageId 
     * @param {module:api/MessagesApi~messagesMessageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesMessageIdGet(messageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling messagesMessageIdGet");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesMessageIdReadPost operation.
     * @callback moduleapi/MessagesApi~messagesMessageIdReadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * marks a message as read
     * Marks a message as read. 
     * @param {String} messageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/MessageIdReadBody} opts.body the associated docket number
     * @param {module:api/MessagesApi~messagesMessageIdReadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesMessageIdReadPost(messageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling messagesMessageIdReadPost");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/{messageId}/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesOutboxSectionSectionGet operation.
     * @callback moduleapi/MessagesApi~messagesOutboxSectionSectionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the outbox messages for the specific section
     * Gets the outbox messages for the specific user section. 
     * @param {String} section 
     * @param {module:api/MessagesApi~messagesOutboxSectionSectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesOutboxSectionSectionGet(section, callback) {
      
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling messagesOutboxSectionSectionGet");
      }

      let pathParams = {
        'section': section
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/outbox/section/{section}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesOutboxUserIdGet operation.
     * @callback moduleapi/MessagesApi~messagesOutboxUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the outbox messages for the specific user id
     * Gets the outbox messages for the specific user id. 
     * @param {String} userId 
     * @param {module:api/MessagesApi~messagesOutboxUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesOutboxUserIdGet(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling messagesOutboxUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/outbox/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesParentMessageIdCompletePost operation.
     * @callback moduleapi/MessagesApi~messagesParentMessageIdCompletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * complete a message
     * Complete a message. 
     * @param {String} parentMessageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParentMessageIdCompleteBody} opts.body the message info
     * @param {module:api/MessagesApi~messagesParentMessageIdCompletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesParentMessageIdCompletePost(parentMessageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'parentMessageId' is set
      if (parentMessageId === undefined || parentMessageId === null) {
        throw new Error("Missing the required parameter 'parentMessageId' when calling messagesParentMessageIdCompletePost");
      }

      let pathParams = {
        'parentMessageId': parentMessageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/{parentMessageId}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesParentMessageIdForwardPost operation.
     * @callback moduleapi/MessagesApi~messagesParentMessageIdForwardPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * forward a message
     * Forward a message. 
     * @param {String} parentMessageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParentMessageIdForwardBody} opts.body the message info
     * @param {module:api/MessagesApi~messagesParentMessageIdForwardPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesParentMessageIdForwardPost(parentMessageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'parentMessageId' is set
      if (parentMessageId === undefined || parentMessageId === null) {
        throw new Error("Missing the required parameter 'parentMessageId' when calling messagesParentMessageIdForwardPost");
      }

      let pathParams = {
        'parentMessageId': parentMessageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/{parentMessageId}/forward', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesParentMessageIdReplyPost operation.
     * @callback moduleapi/MessagesApi~messagesParentMessageIdReplyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reply to a message
     * Reply to a message. 
     * @param {String} parentMessageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParentMessageIdReplyBody} opts.body the message info
     * @param {module:api/MessagesApi~messagesParentMessageIdReplyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesParentMessageIdReplyPost(parentMessageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'parentMessageId' is set
      if (parentMessageId === undefined || parentMessageId === null) {
        throw new Error("Missing the required parameter 'parentMessageId' when calling messagesParentMessageIdReplyPost");
      }

      let pathParams = {
        'parentMessageId': parentMessageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages/{parentMessageId}/reply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messagesPost operation.
     * @callback moduleapi/MessagesApi~messagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a message
     * Create a message. 
     * @param {module:api/MessagesApi~messagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    messagesPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['CognitoUserPool'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
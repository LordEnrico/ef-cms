/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DevEfCms);
  }
}(this, function(expect, DevEfCms) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DocketEntry', function() {
      beforeEach(function() {
        instance = new DevEfCms.DocketEntry();
      });

      it('should create an instance of DocketEntry', function() {
        // TODO: update the code to test DocketEntry
        expect(instance).to.be.a(DevEfCms.DocketEntry);
      });

      it('should have the property addToCoversheet (base name: "addToCoversheet")', function() {
        // TODO: update the code to test the property addToCoversheet
        expect(instance).to.have.property('addToCoversheet');
        // expect(instance.addToCoversheet).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property docketEntryId (base name: "docketEntryId")', function() {
        // TODO: update the code to test the property docketEntryId
        expect(instance).to.have.property('docketEntryId');
        // expect(instance.docketEntryId).to.be(expectedValueLiteral);
      });

      it('should have the property docketNumber (base name: "docketNumber")', function() {
        // TODO: update the code to test the property docketNumber
        expect(instance).to.have.property('docketNumber');
        // expect(instance.docketNumber).to.be(expectedValueLiteral);
      });

      it('should have the property documentTitle (base name: "documentTitle")', function() {
        // TODO: update the code to test the property documentTitle
        expect(instance).to.have.property('documentTitle');
        // expect(instance.documentTitle).to.be(expectedValueLiteral);
      });

      it('should have the property documentType (base name: "documentType")', function() {
        // TODO: update the code to test the property documentType
        expect(instance).to.have.property('documentType');
        // expect(instance.documentType).to.be(expectedValueLiteral);
      });

      it('should have the property draftOrderState (base name: "draftOrderState")', function() {
        // TODO: update the code to test the property draftOrderState
        expect(instance).to.have.property('draftOrderState');
        // expect(instance.draftOrderState).to.be(expectedValueLiteral);
      });

      it('should have the property entityName (base name: "entityName")', function() {
        // TODO: update the code to test the property entityName
        expect(instance).to.have.property('entityName');
        // expect(instance.entityName).to.be(expectedValueLiteral);
      });

      it('should have the property eventCode (base name: "eventCode")', function() {
        // TODO: update the code to test the property eventCode
        expect(instance).to.have.property('eventCode');
        // expect(instance.eventCode).to.be(expectedValueLiteral);
      });

      it('should have the property filedBy (base name: "filedBy")', function() {
        // TODO: update the code to test the property filedBy
        expect(instance).to.have.property('filedBy');
        // expect(instance.filedBy).to.be(expectedValueLiteral);
      });

      it('should have the property filingDate (base name: "filingDate")', function() {
        // TODO: update the code to test the property filingDate
        expect(instance).to.have.property('filingDate');
        // expect(instance.filingDate).to.be(expectedValueLiteral);
      });

      it('should have the property index (base name: "index")', function() {
        // TODO: update the code to test the property index
        expect(instance).to.have.property('index');
        // expect(instance.index).to.be(expectedValueLiteral);
      });

      it('should have the property isDraft (base name: "isDraft")', function() {
        // TODO: update the code to test the property isDraft
        expect(instance).to.have.property('isDraft');
        // expect(instance.isDraft).to.be(expectedValueLiteral);
      });

      it('should have the property isFileAttached (base name: "isFileAttached")', function() {
        // TODO: update the code to test the property isFileAttached
        expect(instance).to.have.property('isFileAttached');
        // expect(instance.isFileAttached).to.be(expectedValueLiteral);
      });

      it('should have the property isMinuteEntry (base name: "isMinuteEntry")', function() {
        // TODO: update the code to test the property isMinuteEntry
        expect(instance).to.have.property('isMinuteEntry');
        // expect(instance.isMinuteEntry).to.be(expectedValueLiteral);
      });

      it('should have the property isOnDocketRecord (base name: "isOnDocketRecord")', function() {
        // TODO: update the code to test the property isOnDocketRecord
        expect(instance).to.have.property('isOnDocketRecord');
        // expect(instance.isOnDocketRecord).to.be(expectedValueLiteral);
      });

      it('should have the property isSealed (base name: "isSealed")', function() {
        // TODO: update the code to test the property isSealed
        expect(instance).to.have.property('isSealed');
        // expect(instance.isSealed).to.be(expectedValueLiteral);
      });

      it('should have the property isStricken (base name: "isStricken")', function() {
        // TODO: update the code to test the property isStricken
        expect(instance).to.have.property('isStricken');
        // expect(instance.isStricken).to.be(expectedValueLiteral);
      });

      it('should have the property pending (base name: "pending")', function() {
        // TODO: update the code to test the property pending
        expect(instance).to.have.property('pending');
        // expect(instance.pending).to.be(expectedValueLiteral);
      });

      it('should have the property processingStatus (base name: "processingStatus")', function() {
        // TODO: update the code to test the property processingStatus
        expect(instance).to.have.property('processingStatus');
        // expect(instance.processingStatus).to.be(expectedValueLiteral);
      });

      it('should have the property receivedAt (base name: "receivedAt")', function() {
        // TODO: update the code to test the property receivedAt
        expect(instance).to.have.property('receivedAt');
        // expect(instance.receivedAt).to.be(expectedValueLiteral);
      });

      it('should have the property sealedTo (base name: "sealedTo")', function() {
        // TODO: update the code to test the property sealedTo
        expect(instance).to.have.property('sealedTo');
        // expect(instance.sealedTo).to.be(expectedValueLiteral);
      });

      it('should have the property servedAt (base name: "servedAt")', function() {
        // TODO: update the code to test the property servedAt
        expect(instance).to.have.property('servedAt');
        // expect(instance.servedAt).to.be(expectedValueLiteral);
      });

      it('should have the property signedAt (base name: "signedAt")', function() {
        // TODO: update the code to test the property signedAt
        expect(instance).to.have.property('signedAt');
        // expect(instance.signedAt).to.be(expectedValueLiteral);
      });

      it('should have the property signedByUserId (base name: "signedByUserId")', function() {
        // TODO: update the code to test the property signedByUserId
        expect(instance).to.have.property('signedByUserId');
        // expect(instance.signedByUserId).to.be(expectedValueLiteral);
      });

      it('should have the property signedJudgeName (base name: "signedJudgeName")', function() {
        // TODO: update the code to test the property signedJudgeName
        expect(instance).to.have.property('signedJudgeName');
        // expect(instance.signedJudgeName).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

    });
  });

}));

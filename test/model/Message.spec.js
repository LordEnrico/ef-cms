/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DevEfCms);
  }
}(this, function(expect, DevEfCms) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Message', function() {
      beforeEach(function() {
        instance = new DevEfCms.Message();
      });

      it('should create an instance of Message', function() {
        // TODO: update the code to test Message
        expect(instance).to.be.a(DevEfCms.Message);
      });

      it('should have the property attachments (base name: "attachments")', function() {
        // TODO: update the code to test the property attachments
        expect(instance).to.have.property('attachments');
        // expect(instance.attachments).to.be(expectedValueLiteral);
      });

      it('should have the property caseStatus (base name: "caseStatus")', function() {
        // TODO: update the code to test the property caseStatus
        expect(instance).to.have.property('caseStatus');
        // expect(instance.caseStatus).to.be(expectedValueLiteral);
      });

      it('should have the property caseTitle (base name: "caseTitle")', function() {
        // TODO: update the code to test the property caseTitle
        expect(instance).to.have.property('caseTitle');
        // expect(instance.caseTitle).to.be(expectedValueLiteral);
      });

      it('should have the property completedAt (base name: "completedAt")', function() {
        // TODO: update the code to test the property completedAt
        expect(instance).to.have.property('completedAt');
        // expect(instance.completedAt).to.be(expectedValueLiteral);
      });

      it('should have the property completedBy (base name: "completedBy")', function() {
        // TODO: update the code to test the property completedBy
        expect(instance).to.have.property('completedBy');
        // expect(instance.completedBy).to.be(expectedValueLiteral);
      });

      it('should have the property completedBySection (base name: "completedBySection")', function() {
        // TODO: update the code to test the property completedBySection
        expect(instance).to.have.property('completedBySection');
        // expect(instance.completedBySection).to.be(expectedValueLiteral);
      });

      it('should have the property completedByUserId (base name: "completedByUserId")', function() {
        // TODO: update the code to test the property completedByUserId
        expect(instance).to.have.property('completedByUserId');
        // expect(instance.completedByUserId).to.be(expectedValueLiteral);
      });

      it('should have the property completedMessage (base name: "completedMessage")', function() {
        // TODO: update the code to test the property completedMessage
        expect(instance).to.have.property('completedMessage');
        // expect(instance.completedMessage).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property docketNumber (base name: "docketNumber")', function() {
        // TODO: update the code to test the property docketNumber
        expect(instance).to.have.property('docketNumber');
        // expect(instance.docketNumber).to.be(expectedValueLiteral);
      });

      it('should have the property docketNumberWithSuffix (base name: "docketNumberWithSuffix")', function() {
        // TODO: update the code to test the property docketNumberWithSuffix
        expect(instance).to.have.property('docketNumberWithSuffix');
        // expect(instance.docketNumberWithSuffix).to.be(expectedValueLiteral);
      });

      it('should have the property entityName (base name: "entityName")', function() {
        // TODO: update the code to test the property entityName
        expect(instance).to.have.property('entityName');
        // expect(instance.entityName).to.be(expectedValueLiteral);
      });

      it('should have the property from (base name: "from")', function() {
        // TODO: update the code to test the property from
        expect(instance).to.have.property('from');
        // expect(instance.from).to.be(expectedValueLiteral);
      });

      it('should have the property fromSection (base name: "fromSection")', function() {
        // TODO: update the code to test the property fromSection
        expect(instance).to.have.property('fromSection');
        // expect(instance.fromSection).to.be(expectedValueLiteral);
      });

      it('should have the property fromUserId (base name: "fromUserId")', function() {
        // TODO: update the code to test the property fromUserId
        expect(instance).to.have.property('fromUserId');
        // expect(instance.fromUserId).to.be(expectedValueLiteral);
      });

      it('should have the property isCompleted (base name: "isCompleted")', function() {
        // TODO: update the code to test the property isCompleted
        expect(instance).to.have.property('isCompleted');
        // expect(instance.isCompleted).to.be(expectedValueLiteral);
      });

      it('should have the property isRepliedTo (base name: "isRepliedTo")', function() {
        // TODO: update the code to test the property isRepliedTo
        expect(instance).to.have.property('isRepliedTo');
        // expect(instance.isRepliedTo).to.be(expectedValueLiteral);
      });

      it('should have the property message (base name: "message")', function() {
        // TODO: update the code to test the property message
        expect(instance).to.have.property('message');
        // expect(instance.message).to.be(expectedValueLiteral);
      });

      it('should have the property messageId (base name: "messageId")', function() {
        // TODO: update the code to test the property messageId
        expect(instance).to.have.property('messageId');
        // expect(instance.messageId).to.be(expectedValueLiteral);
      });

      it('should have the property parentMessageId (base name: "parentMessageId")', function() {
        // TODO: update the code to test the property parentMessageId
        expect(instance).to.have.property('parentMessageId');
        // expect(instance.parentMessageId).to.be(expectedValueLiteral);
      });

      it('should have the property subject (base name: "subject")', function() {
        // TODO: update the code to test the property subject
        expect(instance).to.have.property('subject');
        // expect(instance.subject).to.be(expectedValueLiteral);
      });

      it('should have the property to (base name: "to")', function() {
        // TODO: update the code to test the property to
        expect(instance).to.have.property('to');
        // expect(instance.to).to.be(expectedValueLiteral);
      });

      it('should have the property toSection (base name: "toSection")', function() {
        // TODO: update the code to test the property toSection
        expect(instance).to.have.property('toSection');
        // expect(instance.toSection).to.be(expectedValueLiteral);
      });

      it('should have the property toUserId (base name: "toUserId")', function() {
        // TODO: update the code to test the property toUserId
        expect(instance).to.have.property('toUserId');
        // expect(instance.toUserId).to.be(expectedValueLiteral);
      });

    });
  });

}));

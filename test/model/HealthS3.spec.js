/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DevEfCms);
  }
}(this, function(expect, DevEfCms) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HealthS3', function() {
      beforeEach(function() {
        instance = new DevEfCms.HealthS3();
      });

      it('should create an instance of HealthS3', function() {
        // TODO: update the code to test HealthS3
        expect(instance).to.be.a(DevEfCms.HealthS3);
      });

      it('should have the property app (base name: "app")', function() {
        // TODO: update the code to test the property app
        expect(instance).to.have.property('app');
        // expect(instance.app).to.be(expectedValueLiteral);
      });

      it('should have the property appFailover (base name: "appFailover")', function() {
        // TODO: update the code to test the property appFailover
        expect(instance).to.have.property('appFailover');
        // expect(instance.appFailover).to.be(expectedValueLiteral);
      });

      it('should have the property eastDocuments (base name: "eastDocuments")', function() {
        // TODO: update the code to test the property eastDocuments
        expect(instance).to.have.property('eastDocuments');
        // expect(instance.eastDocuments).to.be(expectedValueLiteral);
      });

      it('should have the property eastTempDocuments (base name: "eastTempDocuments")', function() {
        // TODO: update the code to test the property eastTempDocuments
        expect(instance).to.have.property('eastTempDocuments');
        // expect(instance.eastTempDocuments).to.be(expectedValueLiteral);
      });

      it('should have the property eastQuarantine (base name: "eastQuarantine")', function() {
        // TODO: update the code to test the property eastQuarantine
        expect(instance).to.have.property('eastQuarantine');
        // expect(instance.eastQuarantine).to.be(expectedValueLiteral);
      });

      it('should have the property _public (base name: "public")', function() {
        // TODO: update the code to test the property _public
        expect(instance).to.have.property('_public');
        // expect(instance._public).to.be(expectedValueLiteral);
      });

      it('should have the property publicFailover (base name: "publicFailover")', function() {
        // TODO: update the code to test the property publicFailover
        expect(instance).to.have.property('publicFailover');
        // expect(instance.publicFailover).to.be(expectedValueLiteral);
      });

      it('should have the property westDocuments (base name: "westDocuments")', function() {
        // TODO: update the code to test the property westDocuments
        expect(instance).to.have.property('westDocuments');
        // expect(instance.westDocuments).to.be(expectedValueLiteral);
      });

      it('should have the property westTempDocuments (base name: "westTempDocuments")', function() {
        // TODO: update the code to test the property westTempDocuments
        expect(instance).to.have.property('westTempDocuments');
        // expect(instance.westTempDocuments).to.be(expectedValueLiteral);
      });

      it('should have the property westQuarantine (base name: "westQuarantine")', function() {
        // TODO: update the code to test the property westQuarantine
        expect(instance).to.have.property('westQuarantine');
        // expect(instance.westQuarantine).to.be(expectedValueLiteral);
      });

    });
  });

}));

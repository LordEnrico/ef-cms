/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DevEfCms);
  }
}(this, function(expect, DevEfCms) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DevEfCms.MessagesApi();
  });

  describe('(package)', function() {
    describe('MessagesApi', function() {
      describe('messagesCaseDocketNumberGet', function() {
        it('should call messagesCaseDocketNumberGet successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesCaseDocketNumberGet call and complete the assertions
          /*

          instance.messagesCaseDocketNumberGet(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesCompletedSectionSectionIdGet', function() {
        it('should call messagesCompletedSectionSectionIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesCompletedSectionSectionIdGet call and complete the assertions
          /*

          instance.messagesCompletedSectionSectionIdGet(sectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesCompletedUserIdGet', function() {
        it('should call messagesCompletedUserIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesCompletedUserIdGet call and complete the assertions
          /*

          instance.messagesCompletedUserIdGet(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesInboxSectionSectionGet', function() {
        it('should call messagesInboxSectionSectionGet successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesInboxSectionSectionGet call and complete the assertions
          /*

          instance.messagesInboxSectionSectionGet(section, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesInboxUserIdGet', function() {
        it('should call messagesInboxUserIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesInboxUserIdGet call and complete the assertions
          /*

          instance.messagesInboxUserIdGet(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesMessageIdGet', function() {
        it('should call messagesMessageIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesMessageIdGet call and complete the assertions
          /*

          instance.messagesMessageIdGet(messageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesMessageIdReadPost', function() {
        it('should call messagesMessageIdReadPost successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesMessageIdReadPost call and complete the assertions
          /*
          var opts = {};

          instance.messagesMessageIdReadPost(messageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesOutboxSectionSectionGet', function() {
        it('should call messagesOutboxSectionSectionGet successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesOutboxSectionSectionGet call and complete the assertions
          /*

          instance.messagesOutboxSectionSectionGet(section, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesOutboxUserIdGet', function() {
        it('should call messagesOutboxUserIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesOutboxUserIdGet call and complete the assertions
          /*

          instance.messagesOutboxUserIdGet(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesParentMessageIdCompletePost', function() {
        it('should call messagesParentMessageIdCompletePost successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesParentMessageIdCompletePost call and complete the assertions
          /*
          var opts = {};

          instance.messagesParentMessageIdCompletePost(parentMessageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesParentMessageIdForwardPost', function() {
        it('should call messagesParentMessageIdForwardPost successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesParentMessageIdForwardPost call and complete the assertions
          /*
          var opts = {};

          instance.messagesParentMessageIdForwardPost(parentMessageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesParentMessageIdReplyPost', function() {
        it('should call messagesParentMessageIdReplyPost successfully', function(done) {
          // TODO: uncomment, update parameter values for messagesParentMessageIdReplyPost call and complete the assertions
          /*
          var opts = {};

          instance.messagesParentMessageIdReplyPost(parentMessageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('messagesPost', function() {
        it('should call messagesPost successfully', function(done) {
          // TODO: uncomment messagesPost call and complete the assertions
          /*

          instance.messagesPost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Message);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

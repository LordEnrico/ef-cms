/*
 * dev-ef-cms
 * Documents API for U.S. Tax Court EF-CMS
 *
 * OpenAPI spec version: 2019-03-06T15:30:48Z
 * Contact: webmaster@ustaxcourt.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DevEfCms);
  }
}(this, function(expect, DevEfCms) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DevEfCms.CasesApi();
  });

  describe('(package)', function() {
    describe('CasesApi', function() {
      describe('caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPost', function() {
        it('should call caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPost successfully', function(done) {
          // TODO: uncomment, update parameter values for caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPost call and complete the assertions
          /*

          instance.caseDocumentsDocketNumberDocketEntryIdServeCourtIssuedPost(docketNumber, docketEntryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseDocumentsDocketNumberDocketEntryIdServePost', function() {
        it('should call caseDocumentsDocketNumberDocketEntryIdServePost successfully', function(done) {
          // TODO: uncomment, update parameter values for caseDocumentsDocketNumberDocketEntryIdServePost call and complete the assertions
          /*

          instance.caseDocumentsDocketNumberDocketEntryIdServePost(docketNumber, docketEntryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberAddPetitionerPut', function() {
        it('should call caseMetaDocketNumberAddPetitionerPut successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberAddPetitionerPut call and complete the assertions
          /*

          instance.caseMetaDocketNumberAddPetitionerPut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberBlockDelete', function() {
        it('should call caseMetaDocketNumberBlockDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberBlockDelete call and complete the assertions
          /*

          instance.caseMetaDocketNumberBlockDelete(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberBlockPost', function() {
        it('should call caseMetaDocketNumberBlockPost successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberBlockPost call and complete the assertions
          /*

          instance.caseMetaDocketNumberBlockPost(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberCaseContextPut', function() {
        it('should call caseMetaDocketNumberCaseContextPut successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberCaseContextPut call and complete the assertions
          /*

          instance.caseMetaDocketNumberCaseContextPut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberConsolidateCaseDelete', function() {
        it('should call caseMetaDocketNumberConsolidateCaseDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberConsolidateCaseDelete call and complete the assertions
          /*

          instance.caseMetaDocketNumberConsolidateCaseDelete(docketNumber, docketNumbersToRemove, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberConsolidateCasePut', function() {
        it('should call caseMetaDocketNumberConsolidateCasePut successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberConsolidateCasePut call and complete the assertions
          /*

          instance.caseMetaDocketNumberConsolidateCasePut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberHighPriorityDelete', function() {
        it('should call caseMetaDocketNumberHighPriorityDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberHighPriorityDelete call and complete the assertions
          /*

          instance.caseMetaDocketNumberHighPriorityDelete(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberHighPriorityPost', function() {
        it('should call caseMetaDocketNumberHighPriorityPost successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberHighPriorityPost call and complete the assertions
          /*

          instance.caseMetaDocketNumberHighPriorityPost(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberOtherStatisticsPost', function() {
        it('should call caseMetaDocketNumberOtherStatisticsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberOtherStatisticsPost call and complete the assertions
          /*

          instance.caseMetaDocketNumberOtherStatisticsPost(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberQcCompletePut', function() {
        it('should call caseMetaDocketNumberQcCompletePut successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberQcCompletePut call and complete the assertions
          /*
          var opts = {};

          instance.caseMetaDocketNumberQcCompletePut(docketNumber, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberSealAddressContactIdPut', function() {
        it('should call caseMetaDocketNumberSealAddressContactIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberSealAddressContactIdPut call and complete the assertions
          /*

          instance.caseMetaDocketNumberSealAddressContactIdPut(docketNumber, contactId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberSealPut', function() {
        it('should call caseMetaDocketNumberSealPut successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberSealPut call and complete the assertions
          /*

          instance.caseMetaDocketNumberSealPut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('caseMetaDocketNumberStatisticsPost', function() {
        it('should call caseMetaDocketNumberStatisticsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for caseMetaDocketNumberStatisticsPost call and complete the assertions
          /*

          instance.caseMetaDocketNumberStatisticsPost(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casePartiesDocketNumberAssociatePrivatePractitionerPost', function() {
        it('should call casePartiesDocketNumberAssociatePrivatePractitionerPost successfully', function(done) {
          // TODO: uncomment, update parameter values for casePartiesDocketNumberAssociatePrivatePractitionerPost call and complete the assertions
          /*

          instance.casePartiesDocketNumberAssociatePrivatePractitionerPost(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casePartiesDocketNumberAssociateRespondentPost', function() {
        it('should call casePartiesDocketNumberAssociateRespondentPost successfully', function(done) {
          // TODO: uncomment, update parameter values for casePartiesDocketNumberAssociateRespondentPost call and complete the assertions
          /*

          instance.casePartiesDocketNumberAssociateRespondentPost(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casePartiesDocketNumberCaseDetailsPut', function() {
        it('should call casePartiesDocketNumberCaseDetailsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for casePartiesDocketNumberCaseDetailsPut call and complete the assertions
          /*

          instance.casePartiesDocketNumberCaseDetailsPut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casePartiesDocketNumberContactPrimaryPut', function() {
        it('should call casePartiesDocketNumberContactPrimaryPut successfully', function(done) {
          // TODO: uncomment, update parameter values for casePartiesDocketNumberContactPrimaryPut call and complete the assertions
          /*

          instance.casePartiesDocketNumberContactPrimaryPut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casePartiesDocketNumberContactSecondaryPut', function() {
        it('should call casePartiesDocketNumberContactSecondaryPut successfully', function(done) {
          // TODO: uncomment, update parameter values for casePartiesDocketNumberContactSecondaryPut call and complete the assertions
          /*

          instance.casePartiesDocketNumberContactSecondaryPut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casePartiesDocketNumberCounselUserIdDelete', function() {
        it('should call casePartiesDocketNumberCounselUserIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for casePartiesDocketNumberCounselUserIdDelete call and complete the assertions
          /*

          instance.casePartiesDocketNumberCounselUserIdDelete(docketNumber, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casePartiesDocketNumberCounselUserIdPut', function() {
        it('should call casePartiesDocketNumberCounselUserIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for casePartiesDocketNumberCounselUserIdPut call and complete the assertions
          /*

          instance.casePartiesDocketNumberCounselUserIdPut(docketNumber, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casePartiesDocketNumberPetitionerInfoPut', function() {
        it('should call casePartiesDocketNumberPetitionerInfoPut successfully', function(done) {
          // TODO: uncomment, update parameter values for casePartiesDocketNumberPetitionerInfoPut call and complete the assertions
          /*

          instance.casePartiesDocketNumberPetitionerInfoPut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberConsolidatedCasesGet', function() {
        it('should call casesDocketNumberConsolidatedCasesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberConsolidatedCasesGet call and complete the assertions
          /*

          instance.casesDocketNumberConsolidatedCasesGet(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberGet', function() {
        it('should call casesDocketNumberGet successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberGet call and complete the assertions
          /*

          instance.casesDocketNumberGet(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberHead', function() {
        it('should call casesDocketNumberHead successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberHead call and complete the assertions
          /*

          instance.casesDocketNumberHead(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberIrsPetitionPackageDelete', function() {
        it('should call casesDocketNumberIrsPetitionPackageDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberIrsPetitionPackageDelete call and complete the assertions
          /*

          instance.casesDocketNumberIrsPetitionPackageDelete(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberIrsPetitionPackagePost', function() {
        it('should call casesDocketNumberIrsPetitionPackagePost successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberIrsPetitionPackagePost call and complete the assertions
          /*

          instance.casesDocketNumberIrsPetitionPackagePost(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberPut', function() {
        it('should call casesDocketNumberPut successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberPut call and complete the assertions
          /*

          instance.casesDocketNumberPut(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberRemovePendingDocketEntryIdDelete', function() {
        it('should call casesDocketNumberRemovePendingDocketEntryIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberRemovePendingDocketEntryIdDelete call and complete the assertions
          /*

          instance.casesDocketNumberRemovePendingDocketEntryIdDelete(docketNumber, docketEntryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberStatisticsStatisticIdDelete', function() {
        it('should call casesDocketNumberStatisticsStatisticIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberStatisticsStatisticIdDelete call and complete the assertions
          /*

          instance.casesDocketNumberStatisticsStatisticIdDelete(docketNumber, statisticId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesDocketNumberStatisticsStatisticIdPut', function() {
        it('should call casesDocketNumberStatisticsStatisticIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for casesDocketNumberStatisticsStatisticIdPut call and complete the assertions
          /*

          instance.casesDocketNumberStatisticsStatisticIdPut(docketNumber, statisticId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesGet', function() {
        it('should call casesGet successfully', function(done) {
          // TODO: uncomment casesGet call and complete the assertions
          /*

          instance.casesGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesPaperPost', function() {
        it('should call casesPaperPost successfully', function(done) {
          // TODO: uncomment casesPaperPost call and complete the assertions
          /*

          instance.casesPaperPost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('casesSearchGet', function() {
        it('should call casesSearchGet successfully', function(done) {
          // TODO: uncomment casesSearchGet call and complete the assertions
          /*

          instance.casesSearchGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('irsPractitionersRespondentIdCasesGet', function() {
        it('should call irsPractitionersRespondentIdCasesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for irsPractitionersRespondentIdCasesGet call and complete the assertions
          /*

          instance.irsPractitionersRespondentIdCasesGet(respondentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicApiCasesDocketNumberGet', function() {
        it('should call publicApiCasesDocketNumberGet successfully', function(done) {
          // TODO: uncomment, update parameter values for publicApiCasesDocketNumberGet call and complete the assertions
          /*

          instance.publicApiCasesDocketNumberGet(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicApiDocketNumberSearchDocketNumberGet', function() {
        it('should call publicApiDocketNumberSearchDocketNumberGet successfully', function(done) {
          // TODO: uncomment, update parameter values for publicApiDocketNumberSearchDocketNumberGet call and complete the assertions
          /*

          instance.publicApiDocketNumberSearchDocketNumberGet(docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicApiSearchGet', function() {
        it('should call publicApiSearchGet successfully', function(done) {
          // TODO: uncomment publicApiSearchGet call and complete the assertions
          /*

          instance.publicApiSearchGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsBlockedTrialLocationGet', function() {
        it('should call reportsBlockedTrialLocationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsBlockedTrialLocationGet call and complete the assertions
          /*

          instance.reportsBlockedTrialLocationGet(trialLocation, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsCaseInventoryReportGet', function() {
        it('should call reportsCaseInventoryReportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsCaseInventoryReportGet call and complete the assertions
          /*
          var opts = {};

          instance.reportsCaseInventoryReportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsPrintableCaseInventoryReportGet', function() {
        it('should call reportsPrintableCaseInventoryReportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsPrintableCaseInventoryReportGet call and complete the assertions
          /*
          var opts = {};

          instance.reportsPrintableCaseInventoryReportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersUserIdCaseDocketNumberPendingGet', function() {
        it('should call usersUserIdCaseDocketNumberPendingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for usersUserIdCaseDocketNumberPendingGet call
          /*

          instance.usersUserIdCaseDocketNumberPendingGet(userId, docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersUserIdCaseDocketNumberPendingPut', function() {
        it('should call usersUserIdCaseDocketNumberPendingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for usersUserIdCaseDocketNumberPendingPut call
          /*

          instance.usersUserIdCaseDocketNumberPendingPut(userId, docketNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersUserIdCasesGet', function() {
        it('should call usersUserIdCasesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for usersUserIdCasesGet call and complete the assertions
          /*

          instance.usersUserIdCasesGet(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DevEfCms.ModelCase);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
